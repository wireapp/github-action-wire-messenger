"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryEngine = void 0;
const error_1 = require("./error/");
class MemoryEngine {
    constructor() {
        this.storeName = '';
        this.stores = {};
        this.autoIncrementedPrimaryKey = 1;
    }
    create(tableName, primaryKey, entity) {
        if (entity) {
            this.prepareTable(tableName);
            if (primaryKey === undefined) {
                primaryKey = this.autoIncrementedPrimaryKey;
                this.autoIncrementedPrimaryKey += 1;
            }
            const record = this.stores[this.storeName][tableName][primaryKey];
            if (record) {
                const message = `Record "${primaryKey}" already exists in "${tableName}". You need to delete the record first if you want to overwrite it.`;
                const error = new error_1.RecordAlreadyExistsError(message);
                return Promise.reject(error);
            }
            this.stores[this.storeName][tableName][primaryKey] = entity;
            return Promise.resolve(primaryKey);
        }
        const message = `Record "${primaryKey}" cannot be saved in "${tableName}" because it's "undefined" or "null".`;
        return Promise.reject(new error_1.RecordTypeError(message));
    }
    async clearTables() {
        const tableNames = Object.keys(this.stores);
        await Promise.all(tableNames.map(tableName => this.deleteAll(tableName)));
    }
    async delete(tableName, primaryKey) {
        this.prepareTable(tableName);
        delete this.stores[this.storeName][tableName][primaryKey];
        return primaryKey;
    }
    async deleteAll(tableName) {
        delete this.stores[this.storeName][tableName];
        return true;
    }
    async init(storeName) {
        return this.assignDb(storeName, {});
    }
    async initWithObject(storeName, object) {
        return this.assignDb(storeName, object);
    }
    assignDb(storeName, object) {
        this.storeName = storeName;
        this.stores[this.storeName] = this.stores[this.storeName] || object;
        return this.stores;
    }
    async isSupported() {
        // Always available
    }
    async purge() {
        delete this.stores[this.storeName];
    }
    read(tableName, primaryKey) {
        this.prepareTable(tableName);
        if (this.stores[this.storeName][tableName].hasOwnProperty(primaryKey)) {
            return Promise.resolve(this.stores[this.storeName][tableName][primaryKey]);
        }
        const message = `Record "${primaryKey}" in "${tableName}" could not be found.`;
        return Promise.reject(new error_1.RecordNotFoundError(message));
    }
    readAll(tableName) {
        this.prepareTable(tableName);
        const promises = [];
        for (const primaryKey of Object.keys(this.stores[this.storeName][tableName])) {
            promises.push(this.read(tableName, primaryKey));
        }
        return Promise.all(promises);
    }
    readAllPrimaryKeys(tableName) {
        this.prepareTable(tableName);
        return Promise.resolve(Object.keys(this.stores[this.storeName][tableName]));
    }
    async update(tableName, primaryKey, changes) {
        this.prepareTable(tableName);
        const entity = await this.read(tableName, primaryKey);
        const updatedEntity = Object.assign(Object.assign({}, entity), changes);
        this.stores[this.storeName][tableName][primaryKey] = updatedEntity;
        return primaryKey;
    }
    async updateOrCreate(tableName, primaryKey, changes) {
        this.prepareTable(tableName);
        try {
            await this.update(tableName, primaryKey, changes);
            return primaryKey;
        }
        catch (error) {
            if (error instanceof error_1.RecordNotFoundError) {
                const newPrimaryKey = await this.create(tableName, primaryKey, changes);
                return newPrimaryKey;
            }
            throw error;
        }
    }
    prepareTable(tableName) {
        if (!this.stores[this.storeName][tableName]) {
            this.stores[this.storeName][tableName] = {};
        }
    }
}
exports.MemoryEngine = MemoryEngine;
//# sourceMappingURL=MemoryEngine.js.map