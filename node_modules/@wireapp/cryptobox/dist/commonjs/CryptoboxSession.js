"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CryptoboxSession = void 0;
const proteus_1 = require("@wireapp/proteus");
const DecryptionError_1 = require("./DecryptionError");
class CryptoboxSession {
    constructor(id, session) {
        this.id = id;
        this.session = session;
        Object.freeze(this);
    }
    decrypt(ciphertext, pk_store) {
        return __awaiter(this, void 0, void 0, function* () {
            if (ciphertext.byteLength === 0) {
                throw new DecryptionError_1.DecryptionError('Cannot decrypt an empty ArrayBuffer.');
            }
            const envelope = proteus_1.message.Envelope.deserialise(ciphertext);
            return this.session.decrypt(pk_store, envelope);
        });
    }
    encrypt(plaintext) {
        return __awaiter(this, void 0, void 0, function* () {
            const ciphertext = yield this.session.encrypt(plaintext);
            return ciphertext.serialise();
        });
    }
    fingerprint_local() {
        return this.session.local_identity.public_key.fingerprint();
    }
    fingerprint_remote() {
        return this.session.remote_identity.fingerprint();
    }
}
exports.CryptoboxSession = CryptoboxSession;
//# sourceMappingURL=CryptoboxSession.js.map