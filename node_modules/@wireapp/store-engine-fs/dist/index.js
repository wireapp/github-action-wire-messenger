"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileEngine = void 0;
const store_engine_1 = require("@wireapp/store-engine");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
let FileEngine = /** @class */ (() => {
    class FileEngine {
        constructor(baseDirectory = './', options = {
            fileExtension: '.dat',
        }) {
            this.baseDirectory = baseDirectory;
            this.options = options;
            this.autoIncrementedPrimaryKey = 1;
            this.storeName = '';
        }
        static enforcePathRestrictions(givenTrustedRoot, givenPath) {
            const trustedRoot = FileEngine.path.resolve(givenTrustedRoot);
            const trustedRootDetails = FileEngine.path.parse(trustedRoot);
            if (trustedRootDetails.root === trustedRootDetails.dir && trustedRootDetails.base === '') {
                const message = `"${trustedRoot}" cannot be the root of the filesystem.`;
                throw new store_engine_1.error.PathValidationError(message);
            }
            const unsafePath = FileEngine.path.resolve(trustedRoot, givenPath);
            if (unsafePath.startsWith(trustedRoot) === false) {
                const message = `Path traversal has been detected. Allowed path was "${trustedRoot}" but tested path "${givenPath}" attempted to reach "${unsafePath}"`;
                throw new store_engine_1.error.PathValidationError(message);
            }
            return unsafePath;
        }
        isSupported() {
            return __awaiter(this, void 0, void 0, function* () {
                const isNodeOrElectron = typeof process === 'object';
                if (!isNodeOrElectron) {
                    const message = `Node.js File System Module is not available on your platform.`;
                    throw new store_engine_1.error.UnsupportedError(message);
                }
            });
        }
        init(storeName = '', options) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.isSupported();
                FileEngine.enforcePathRestrictions(this.baseDirectory, storeName);
                this.storeName = FileEngine.path.resolve(this.baseDirectory, storeName);
                yield fs_extra_1.default.ensureDir(this.storeName);
                this.options = Object.assign(Object.assign({}, this.options), options);
                return this.storeName;
            });
        }
        purge() {
            return fs_extra_1.default.remove(this.storeName);
        }
        clearTables() {
            return __awaiter(this, void 0, void 0, function* () {
                const files = yield fs_extra_1.default.readdir(this.storeName);
                const tableNames = files.map(file => FileEngine.path.basename(file, FileEngine.path.extname(file)));
                yield Promise.all(tableNames.map(tableName => this.deleteAll(tableName)));
            });
        }
        create(tableName, primaryKey, entity) {
            return __awaiter(this, void 0, void 0, function* () {
                if (entity) {
                    if (primaryKey === undefined) {
                        primaryKey = this.autoIncrementedPrimaryKey;
                        this.autoIncrementedPrimaryKey += 1;
                    }
                    const filePath = this.resolvePath(tableName, primaryKey);
                    let newEntity = entity;
                    if (typeof entity === 'object') {
                        newEntity = JSON.stringify(entity);
                    }
                    try {
                        yield fs_extra_1.default.writeFile(filePath, newEntity, { flag: 'wx' });
                        return primaryKey;
                    }
                    catch (error) {
                        if (error.code === 'ENOENT') {
                            yield fs_extra_1.default.outputFile(filePath, newEntity);
                            return primaryKey;
                        }
                        else if (error.code === 'EEXIST') {
                            const message = `Record "${primaryKey}" already exists in "${tableName}". You need to delete the record first if you want to overwrite it.`;
                            throw new store_engine_1.error.RecordAlreadyExistsError(message);
                        }
                        throw error;
                    }
                }
                else {
                    const message = `Record "${primaryKey}" cannot be saved in "${tableName}" because it's "undefined" or "null".`;
                    throw new store_engine_1.error.RecordTypeError(message);
                }
            });
        }
        delete(tableName, primaryKey) {
            return __awaiter(this, void 0, void 0, function* () {
                const file = this.resolvePath(tableName, primaryKey);
                yield fs_extra_1.default.remove(file);
                return primaryKey;
            });
        }
        deleteAll(tableName) {
            return __awaiter(this, void 0, void 0, function* () {
                const directory = this.resolvePath(tableName);
                try {
                    yield fs_extra_1.default.remove(directory);
                    return true;
                }
                catch (error) {
                    return false;
                }
            });
        }
        read(tableName, primaryKey) {
            return __awaiter(this, void 0, void 0, function* () {
                const file = this.resolvePath(tableName, primaryKey);
                let data;
                try {
                    data = yield fs_extra_1.default.readFile(file, { encoding: 'utf8', flag: 'r' });
                }
                catch (error) {
                    if (error.code === 'ENOENT') {
                        const message = `Record "${primaryKey}" in "${tableName}" could not be found.`;
                        throw new store_engine_1.error.RecordNotFoundError(message);
                    }
                    throw error;
                }
                try {
                    data = JSON.parse(data);
                }
                catch (error) {
                    // No JSON found but that's okay
                }
                return data;
            });
        }
        readAll(tableName) {
            return __awaiter(this, void 0, void 0, function* () {
                const directory = this.resolvePath(tableName);
                const files = yield fs_extra_1.default.readdir(directory);
                const recordNames = files.map(file => FileEngine.path.basename(file, FileEngine.path.extname(file)));
                const promises = recordNames.map(primaryKey => this.read(tableName, primaryKey));
                return Promise.all(promises);
            });
        }
        readAllPrimaryKeys(tableName) {
            return __awaiter(this, void 0, void 0, function* () {
                const directory = this.resolvePath(tableName);
                let files;
                try {
                    files = yield fs_extra_1.default.readdir(directory);
                }
                catch (error) {
                    if (error.code === 'ENOENT') {
                        return [];
                    }
                    throw error;
                }
                return files.map(file => FileEngine.path.parse(file).name);
            });
        }
        update(tableName, primaryKey, changes) {
            return __awaiter(this, void 0, void 0, function* () {
                const file = this.resolvePath(tableName, primaryKey);
                let record = yield this.read(tableName, primaryKey);
                if (typeof record === 'string') {
                    record = JSON.parse(record);
                }
                // TODO: Apply deep merge!
                const updatedRecord = JSON.stringify(Object.assign(Object.assign({}, record), changes));
                yield fs_extra_1.default.outputFile(file, updatedRecord);
                return primaryKey;
            });
        }
        updateOrCreate(tableName, primaryKey, changes) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    yield this.update(tableName, primaryKey, changes);
                }
                catch (error) {
                    const doesNotExist = error instanceof store_engine_1.error.RecordNotFoundError;
                    const doesNotExistAndHasNoPrimaryKey = error.code === 'EISDIR' && primaryKey === undefined;
                    if (doesNotExist || doesNotExistAndHasNoPrimaryKey) {
                        return this.create(tableName, primaryKey, changes);
                    }
                    throw error;
                }
                return primaryKey;
            });
        }
        resolvePath(tableName, primaryKey) {
            const tableNamePath = FileEngine.enforcePathRestrictions(this.storeName, tableName);
            const primaryKeyPath = FileEngine.enforcePathRestrictions(tableNamePath, primaryKey ? `${primaryKey}${this.options.fileExtension}` : '');
            return primaryKeyPath;
        }
    }
    // Using a reference to Node.js' "path" module to influence the platform-specific behaviour in our tests
    FileEngine.path = path_1.default;
    return FileEngine;
})();
exports.FileEngine = FileEngine;
//# sourceMappingURL=index.js.map