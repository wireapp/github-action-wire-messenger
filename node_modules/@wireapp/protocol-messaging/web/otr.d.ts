import * as $protobuf from "protobufjs";
export namespace proteus {

    interface IUserId {
        uuid: Uint8Array;
    }

    class UserId implements IUserId {
        constructor(properties?: proteus.IUserId);
        public uuid: Uint8Array;
        public static create(properties?: proteus.IUserId): proteus.UserId;
        public static encode(message: proteus.IUserId, writer?: $protobuf.Writer): $protobuf.Writer;
        public static encodeDelimited(message: proteus.IUserId, writer?: $protobuf.Writer): $protobuf.Writer;
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.UserId;
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.UserId;
        public static verify(message: { [k: string]: any }): (string|null);
        public static fromObject(object: { [k: string]: any }): proteus.UserId;
        public static toObject(message: proteus.UserId, options?: $protobuf.IConversionOptions): { [k: string]: any };
        public toJSON(): { [k: string]: any };
    }

    interface IQualifiedUserId {
        id: string;
        domain: string;
    }

    class QualifiedUserId implements IQualifiedUserId {
        constructor(properties?: proteus.IQualifiedUserId);
        public id: string;
        public domain: string;
        public static create(properties?: proteus.IQualifiedUserId): proteus.QualifiedUserId;
        public static encode(message: proteus.IQualifiedUserId, writer?: $protobuf.Writer): $protobuf.Writer;
        public static encodeDelimited(message: proteus.IQualifiedUserId, writer?: $protobuf.Writer): $protobuf.Writer;
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.QualifiedUserId;
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.QualifiedUserId;
        public static verify(message: { [k: string]: any }): (string|null);
        public static fromObject(object: { [k: string]: any }): proteus.QualifiedUserId;
        public static toObject(message: proteus.QualifiedUserId, options?: $protobuf.IConversionOptions): { [k: string]: any };
        public toJSON(): { [k: string]: any };
    }

    interface IClientId {
        client: (number|Long);
    }

    class ClientId implements IClientId {
        constructor(properties?: proteus.IClientId);
        public client: (number|Long);
        public static create(properties?: proteus.IClientId): proteus.ClientId;
        public static encode(message: proteus.IClientId, writer?: $protobuf.Writer): $protobuf.Writer;
        public static encodeDelimited(message: proteus.IClientId, writer?: $protobuf.Writer): $protobuf.Writer;
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.ClientId;
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.ClientId;
        public static verify(message: { [k: string]: any }): (string|null);
        public static fromObject(object: { [k: string]: any }): proteus.ClientId;
        public static toObject(message: proteus.ClientId, options?: $protobuf.IConversionOptions): { [k: string]: any };
        public toJSON(): { [k: string]: any };
    }

    interface IClientEntry {
        client: proteus.IClientId;
        text: Uint8Array;
    }

    class ClientEntry implements IClientEntry {
        constructor(properties?: proteus.IClientEntry);
        public client: proteus.IClientId;
        public text: Uint8Array;
        public static create(properties?: proteus.IClientEntry): proteus.ClientEntry;
        public static encode(message: proteus.IClientEntry, writer?: $protobuf.Writer): $protobuf.Writer;
        public static encodeDelimited(message: proteus.IClientEntry, writer?: $protobuf.Writer): $protobuf.Writer;
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.ClientEntry;
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.ClientEntry;
        public static verify(message: { [k: string]: any }): (string|null);
        public static fromObject(object: { [k: string]: any }): proteus.ClientEntry;
        public static toObject(message: proteus.ClientEntry, options?: $protobuf.IConversionOptions): { [k: string]: any };
        public toJSON(): { [k: string]: any };
    }

    interface IUserEntry {
        user: proteus.IUserId;
        clients?: (proteus.IClientEntry[]|null);
    }

    class UserEntry implements IUserEntry {
        constructor(properties?: proteus.IUserEntry);
        public user: proteus.IUserId;
        public clients: proteus.IClientEntry[];
        public static create(properties?: proteus.IUserEntry): proteus.UserEntry;
        public static encode(message: proteus.IUserEntry, writer?: $protobuf.Writer): $protobuf.Writer;
        public static encodeDelimited(message: proteus.IUserEntry, writer?: $protobuf.Writer): $protobuf.Writer;
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.UserEntry;
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.UserEntry;
        public static verify(message: { [k: string]: any }): (string|null);
        public static fromObject(object: { [k: string]: any }): proteus.UserEntry;
        public static toObject(message: proteus.UserEntry, options?: $protobuf.IConversionOptions): { [k: string]: any };
        public toJSON(): { [k: string]: any };
    }

    interface IQualifiedUserEntry {
        domain: string;
        entries?: (proteus.IUserEntry[]|null);
    }

    class QualifiedUserEntry implements IQualifiedUserEntry {
        constructor(properties?: proteus.IQualifiedUserEntry);
        public domain: string;
        public entries: proteus.IUserEntry[];
        public static create(properties?: proteus.IQualifiedUserEntry): proteus.QualifiedUserEntry;
        public static encode(message: proteus.IQualifiedUserEntry, writer?: $protobuf.Writer): $protobuf.Writer;
        public static encodeDelimited(message: proteus.IQualifiedUserEntry, writer?: $protobuf.Writer): $protobuf.Writer;
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.QualifiedUserEntry;
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.QualifiedUserEntry;
        public static verify(message: { [k: string]: any }): (string|null);
        public static fromObject(object: { [k: string]: any }): proteus.QualifiedUserEntry;
        public static toObject(message: proteus.QualifiedUserEntry, options?: $protobuf.IConversionOptions): { [k: string]: any };
        public toJSON(): { [k: string]: any };
    }

    enum Priority {
        LOW_PRIORITY = 1,
        HIGH_PRIORITY = 2
    }

    interface INewOtrMessage {
        sender: proteus.IClientId;
        recipients?: (proteus.IUserEntry[]|null);
        nativePush?: (boolean|null);
        blob?: (Uint8Array|null);
        nativePriority?: (proteus.Priority|null);
        transient?: (boolean|null);
        reportMissing?: (proteus.IUserId[]|null);
    }

    class NewOtrMessage implements INewOtrMessage {
        constructor(properties?: proteus.INewOtrMessage);
        public sender: proteus.IClientId;
        public recipients: proteus.IUserEntry[];
        public nativePush: boolean;
        public blob: Uint8Array;
        public nativePriority: proteus.Priority;
        public transient: boolean;
        public reportMissing: proteus.IUserId[];
        public static create(properties?: proteus.INewOtrMessage): proteus.NewOtrMessage;
        public static encode(message: proteus.INewOtrMessage, writer?: $protobuf.Writer): $protobuf.Writer;
        public static encodeDelimited(message: proteus.INewOtrMessage, writer?: $protobuf.Writer): $protobuf.Writer;
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.NewOtrMessage;
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.NewOtrMessage;
        public static verify(message: { [k: string]: any }): (string|null);
        public static fromObject(object: { [k: string]: any }): proteus.NewOtrMessage;
        public static toObject(message: proteus.NewOtrMessage, options?: $protobuf.IConversionOptions): { [k: string]: any };
        public toJSON(): { [k: string]: any };
    }

    interface IQualifiedNewOtrMessage {
        sender: proteus.IClientId;
        recipients?: (proteus.IQualifiedUserEntry[]|null);
        nativePush?: (boolean|null);
        blob?: (Uint8Array|null);
        nativePriority?: (proteus.Priority|null);
        transient?: (boolean|null);
        reportAll?: (proteus.ClientMismatchStrategy.IReportAll|null);
        ignoreAll?: (proteus.ClientMismatchStrategy.IIgnoreAll|null);
        reportOnly?: (proteus.ClientMismatchStrategy.IReportOnly|null);
        ignoreOnly?: (proteus.ClientMismatchStrategy.IIgnoreOnly|null);
    }

    class QualifiedNewOtrMessage implements IQualifiedNewOtrMessage {
        constructor(properties?: proteus.IQualifiedNewOtrMessage);
        public sender: proteus.IClientId;
        public recipients: proteus.IQualifiedUserEntry[];
        public nativePush: boolean;
        public blob: Uint8Array;
        public nativePriority: proteus.Priority;
        public transient: boolean;
        public reportAll?: (proteus.ClientMismatchStrategy.IReportAll|null);
        public ignoreAll?: (proteus.ClientMismatchStrategy.IIgnoreAll|null);
        public reportOnly?: (proteus.ClientMismatchStrategy.IReportOnly|null);
        public ignoreOnly?: (proteus.ClientMismatchStrategy.IIgnoreOnly|null);
        public clientMismatchStrategy?: ("reportAll"|"ignoreAll"|"reportOnly"|"ignoreOnly");
        public static create(properties?: proteus.IQualifiedNewOtrMessage): proteus.QualifiedNewOtrMessage;
        public static encode(message: proteus.IQualifiedNewOtrMessage, writer?: $protobuf.Writer): $protobuf.Writer;
        public static encodeDelimited(message: proteus.IQualifiedNewOtrMessage, writer?: $protobuf.Writer): $protobuf.Writer;
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.QualifiedNewOtrMessage;
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.QualifiedNewOtrMessage;
        public static verify(message: { [k: string]: any }): (string|null);
        public static fromObject(object: { [k: string]: any }): proteus.QualifiedNewOtrMessage;
        public static toObject(message: proteus.QualifiedNewOtrMessage, options?: $protobuf.IConversionOptions): { [k: string]: any };
        public toJSON(): { [k: string]: any };
    }

    interface IClientMismatchStrategy {
    }

    class ClientMismatchStrategy implements IClientMismatchStrategy {
        constructor(properties?: proteus.IClientMismatchStrategy);
        public static create(properties?: proteus.IClientMismatchStrategy): proteus.ClientMismatchStrategy;
        public static encode(message: proteus.IClientMismatchStrategy, writer?: $protobuf.Writer): $protobuf.Writer;
        public static encodeDelimited(message: proteus.IClientMismatchStrategy, writer?: $protobuf.Writer): $protobuf.Writer;
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.ClientMismatchStrategy;
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.ClientMismatchStrategy;
        public static verify(message: { [k: string]: any }): (string|null);
        public static fromObject(object: { [k: string]: any }): proteus.ClientMismatchStrategy;
        public static toObject(message: proteus.ClientMismatchStrategy, options?: $protobuf.IConversionOptions): { [k: string]: any };
        public toJSON(): { [k: string]: any };
    }

    namespace ClientMismatchStrategy {

        interface IReportAll {
        }

        class ReportAll implements IReportAll {
            constructor(properties?: proteus.ClientMismatchStrategy.IReportAll);
            public static create(properties?: proteus.ClientMismatchStrategy.IReportAll): proteus.ClientMismatchStrategy.ReportAll;
            public static encode(message: proteus.ClientMismatchStrategy.IReportAll, writer?: $protobuf.Writer): $protobuf.Writer;
            public static encodeDelimited(message: proteus.ClientMismatchStrategy.IReportAll, writer?: $protobuf.Writer): $protobuf.Writer;
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.ClientMismatchStrategy.ReportAll;
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.ClientMismatchStrategy.ReportAll;
            public static verify(message: { [k: string]: any }): (string|null);
            public static fromObject(object: { [k: string]: any }): proteus.ClientMismatchStrategy.ReportAll;
            public static toObject(message: proteus.ClientMismatchStrategy.ReportAll, options?: $protobuf.IConversionOptions): { [k: string]: any };
            public toJSON(): { [k: string]: any };
        }

        interface IIgnoreAll {
        }

        class IgnoreAll implements IIgnoreAll {
            constructor(properties?: proteus.ClientMismatchStrategy.IIgnoreAll);
            public static create(properties?: proteus.ClientMismatchStrategy.IIgnoreAll): proteus.ClientMismatchStrategy.IgnoreAll;
            public static encode(message: proteus.ClientMismatchStrategy.IIgnoreAll, writer?: $protobuf.Writer): $protobuf.Writer;
            public static encodeDelimited(message: proteus.ClientMismatchStrategy.IIgnoreAll, writer?: $protobuf.Writer): $protobuf.Writer;
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.ClientMismatchStrategy.IgnoreAll;
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.ClientMismatchStrategy.IgnoreAll;
            public static verify(message: { [k: string]: any }): (string|null);
            public static fromObject(object: { [k: string]: any }): proteus.ClientMismatchStrategy.IgnoreAll;
            public static toObject(message: proteus.ClientMismatchStrategy.IgnoreAll, options?: $protobuf.IConversionOptions): { [k: string]: any };
            public toJSON(): { [k: string]: any };
        }

        interface IReportOnly {
            userIds?: (proteus.IQualifiedUserId[]|null);
        }

        class ReportOnly implements IReportOnly {
            constructor(properties?: proteus.ClientMismatchStrategy.IReportOnly);
            public userIds: proteus.IQualifiedUserId[];
            public static create(properties?: proteus.ClientMismatchStrategy.IReportOnly): proteus.ClientMismatchStrategy.ReportOnly;
            public static encode(message: proteus.ClientMismatchStrategy.IReportOnly, writer?: $protobuf.Writer): $protobuf.Writer;
            public static encodeDelimited(message: proteus.ClientMismatchStrategy.IReportOnly, writer?: $protobuf.Writer): $protobuf.Writer;
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.ClientMismatchStrategy.ReportOnly;
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.ClientMismatchStrategy.ReportOnly;
            public static verify(message: { [k: string]: any }): (string|null);
            public static fromObject(object: { [k: string]: any }): proteus.ClientMismatchStrategy.ReportOnly;
            public static toObject(message: proteus.ClientMismatchStrategy.ReportOnly, options?: $protobuf.IConversionOptions): { [k: string]: any };
            public toJSON(): { [k: string]: any };
        }

        interface IIgnoreOnly {
            userIds?: (proteus.IQualifiedUserId[]|null);
        }

        class IgnoreOnly implements IIgnoreOnly {
            constructor(properties?: proteus.ClientMismatchStrategy.IIgnoreOnly);
            public userIds: proteus.IQualifiedUserId[];
            public static create(properties?: proteus.ClientMismatchStrategy.IIgnoreOnly): proteus.ClientMismatchStrategy.IgnoreOnly;
            public static encode(message: proteus.ClientMismatchStrategy.IIgnoreOnly, writer?: $protobuf.Writer): $protobuf.Writer;
            public static encodeDelimited(message: proteus.ClientMismatchStrategy.IIgnoreOnly, writer?: $protobuf.Writer): $protobuf.Writer;
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.ClientMismatchStrategy.IgnoreOnly;
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.ClientMismatchStrategy.IgnoreOnly;
            public static verify(message: { [k: string]: any }): (string|null);
            public static fromObject(object: { [k: string]: any }): proteus.ClientMismatchStrategy.IgnoreOnly;
            public static toObject(message: proteus.ClientMismatchStrategy.IgnoreOnly, options?: $protobuf.IConversionOptions): { [k: string]: any };
            public toJSON(): { [k: string]: any };
        }
    }

    interface IOtrAssetMeta {
        sender: proteus.IClientId;
        recipients?: (proteus.IUserEntry[]|null);
        isInline?: (boolean|null);
        nativePush?: (boolean|null);
    }

    class OtrAssetMeta implements IOtrAssetMeta {
        constructor(properties?: proteus.IOtrAssetMeta);
        public sender: proteus.IClientId;
        public recipients: proteus.IUserEntry[];
        public isInline: boolean;
        public nativePush: boolean;
        public static create(properties?: proteus.IOtrAssetMeta): proteus.OtrAssetMeta;
        public static encode(message: proteus.IOtrAssetMeta, writer?: $protobuf.Writer): $protobuf.Writer;
        public static encodeDelimited(message: proteus.IOtrAssetMeta, writer?: $protobuf.Writer): $protobuf.Writer;
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): proteus.OtrAssetMeta;
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): proteus.OtrAssetMeta;
        public static verify(message: { [k: string]: any }): (string|null);
        public static fromObject(object: { [k: string]: any }): proteus.OtrAssetMeta;
        public static toObject(message: proteus.OtrAssetMeta, options?: $protobuf.IConversionOptions): { [k: string]: any };
        public toJSON(): { [k: string]: any };
    }
}
