"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecvChain = void 0;
const DecodeError_1 = require("../errors/DecodeError");
const DecryptError_1 = require("../errors/DecryptError");
const ProteusError_1 = require("../errors/ProteusError");
const PublicKey_1 = require("../keys/PublicKey");
const ChainKey_1 = require("./ChainKey");
const MessageKeys_1 = require("./MessageKeys");
class RecvChain {
    constructor(chainKey, publicKey, messageKeys = []) {
        this.chain_key = chainKey;
        this.ratchet_key = publicKey;
        this.message_keys = messageKeys;
    }
    try_message_keys(envelope, msg) {
        var _a;
        if (((_a = this.message_keys[0]) === null || _a === void 0 ? void 0 : _a.counter) > msg.counter) {
            const message = `Message too old. Counter for oldest staged chain key is '${this.message_keys[0].counter}' while message counter is '${msg.counter}'.`;
            throw new DecryptError_1.DecryptError.OutdatedMessage(message, DecryptError_1.DecryptError.CODE.CASE_208);
        }
        const idx = this.message_keys.findIndex(mk => {
            return mk.counter === msg.counter;
        });
        if (idx === -1) {
            throw new DecryptError_1.DecryptError.DuplicateMessage(undefined, DecryptError_1.DecryptError.CODE.CASE_209);
        }
        const messageKey = this.message_keys.splice(idx, 1)[0];
        if (!envelope.verify(messageKey.mac_key)) {
            const message = `Envelope verification failed for message with counter behind. Message index is '${msg.counter}' while receive chain index is '${this.chain_key.idx}'.`;
            throw new DecryptError_1.DecryptError.InvalidSignature(message, DecryptError_1.DecryptError.CODE.CASE_210);
        }
        return messageKey.decrypt(msg.cipher_text);
    }
    stage_message_keys(msg) {
        const num = msg.counter - this.chain_key.idx;
        if (num > RecvChain.MAX_COUNTER_GAP) {
            if (this.chain_key.idx === 0) {
                throw new DecryptError_1.DecryptError.TooDistantFuture('Skipped too many messages at the beginning of a receive chain.', DecryptError_1.DecryptError.CODE.CASE_211);
            }
            throw new DecryptError_1.DecryptError.TooDistantFuture(`Skipped too many messages within a used receive chain. Receive chain counter is '${this.chain_key.idx}'`, DecryptError_1.DecryptError.CODE.CASE_212);
        }
        const messageKeys = [];
        let chainKey = this.chain_key;
        for (let index = 0; index <= num - 1; index++) {
            messageKeys.push(ChainKey_1.ChainKey.message_keys(chainKey));
            chainKey = ChainKey_1.ChainKey.next(chainKey);
        }
        const messageKey = ChainKey_1.ChainKey.message_keys(chainKey);
        return [chainKey, messageKey, messageKeys];
    }
    commit_message_keys(keys) {
        if (keys.length > RecvChain.MAX_COUNTER_GAP) {
            throw new ProteusError_1.ProteusError(`Number of message keys (${keys.length}) exceed message chain counter gap (${RecvChain.MAX_COUNTER_GAP}).`, ProteusError_1.ProteusError.CODE.CASE_103);
        }
        const excess = this.message_keys.length + keys.length - RecvChain.MAX_COUNTER_GAP;
        for (let index = 0; index <= excess - 1; index++) {
            this.message_keys.shift();
        }
        keys.map(key => this.message_keys.push(key));
        if (keys.length > RecvChain.MAX_COUNTER_GAP) {
            throw new ProteusError_1.ProteusError(`Skipped message keys which exceed the message chain counter gap (${RecvChain.MAX_COUNTER_GAP}).`, ProteusError_1.ProteusError.CODE.CASE_104);
        }
    }
    static encode(encoder, recvChain) {
        encoder.object(RecvChain.propertiesLength);
        encoder.u8(0);
        ChainKey_1.ChainKey.encode(encoder, recvChain.chain_key);
        encoder.u8(1);
        PublicKey_1.PublicKey.encode(encoder, recvChain.ratchet_key);
        encoder.u8(2);
        encoder.array(recvChain.message_keys.length);
        return recvChain.message_keys.map(key => MessageKeys_1.MessageKeys.encode(encoder, key));
    }
    static decode(decoder) {
        const propertiesLength = decoder.object();
        if (propertiesLength === RecvChain.propertiesLength) {
            decoder.u8();
            const chainKey = ChainKey_1.ChainKey.decode(decoder);
            decoder.u8();
            const ratchetKey = PublicKey_1.PublicKey.decode(decoder);
            decoder.u8();
            const messageKeys = [];
            let len = decoder.array();
            while (len--) {
                messageKeys.push(MessageKeys_1.MessageKeys.decode(decoder));
            }
            return new RecvChain(chainKey, ratchetKey, messageKeys);
        }
        throw new DecodeError_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
    }
}
exports.RecvChain = RecvChain;
RecvChain.MAX_COUNTER_GAP = 1000;
RecvChain.propertiesLength = 3;
//# sourceMappingURL=RecvChain.js.map