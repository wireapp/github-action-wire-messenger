import { Decoder, Encoder } from '@wireapp/cbor';
import { IdentityKeyPair } from '../keys/IdentityKeyPair';
import { PreKeyBundle } from '../keys/PreKeyBundle';
import { KeyPair } from '../keys/KeyPair';
import { RecvChain } from './RecvChain';
import { RootKey } from './RootKey';
import { SendChain } from './SendChain';
import { PublicKey } from '../keys/PublicKey';
import { IdentityKey } from '../keys/IdentityKey';
import { SessionTag } from '../message/SessionTag';
import { Envelope } from '../message/Envelope';
import { CipherMessage } from '../message/CipherMessage';
export declare class SessionState {
    static MAX_RECV_CHAINS: number;
    prev_counter: number;
    recv_chains: RecvChain[];
    root_key: RootKey;
    send_chain: SendChain;
    private static readonly propertiesLength;
    constructor(rootKey: RootKey, sendChain: SendChain, receiveChains?: RecvChain[], prevCounter?: number);
    static init_as_alice(aliceIdentityPair: IdentityKeyPair, aliceBase: IdentityKeyPair | KeyPair, bobPreKeyBundle: PreKeyBundle): SessionState;
    static init_as_bob(bobIdent: IdentityKeyPair, bobPrekey: KeyPair, aliceIdent: IdentityKey, aliceBase: PublicKey): SessionState;
    ratchet(ratchetKey: PublicKey): void;
    static encrypt(sessionState: SessionState, identityKey: IdentityKey, pending: [number, PublicKey] | null, tag: SessionTag, plaintext: string | Uint8Array): Envelope;
    decrypt(envelope: Envelope, msg: CipherMessage): Uint8Array;
    serialise(): ArrayBuffer;
    static deserialise(buf: ArrayBuffer): SessionState;
    static encode(encoder: Encoder, sessionState: SessionState): Encoder;
    static decode(decoder: Decoder): SessionState;
}
