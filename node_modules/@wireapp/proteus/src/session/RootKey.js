"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootKey = void 0;
const CipherKey_1 = require("../derived/CipherKey");
const DerivedSecrets_1 = require("../derived/DerivedSecrets");
const SecretKey_1 = require("../keys/SecretKey");
const ChainKey_1 = require("./ChainKey");
const InputError_1 = require("../errors/InputError");
const DecodeError_1 = require("../errors/DecodeError");
class RootKey {
    constructor(key) {
        this.key = key;
    }
    static from_cipher_key(cipherKey) {
        return new RootKey(cipherKey);
    }
    dh_ratchet(ours, theirs) {
        const secret = SecretKey_1.SecretKey.shared_secret(theirs, ours.secret_key);
        const derivedSecrets = DerivedSecrets_1.DerivedSecrets.kdf(secret, this.key.key, 'dh_ratchet');
        return [RootKey.from_cipher_key(derivedSecrets.cipher_key), ChainKey_1.ChainKey.from_mac_key(derivedSecrets.mac_key, 0)];
    }
    static encode(encoder, rootKey) {
        encoder.object(RootKey.propertiesLength);
        encoder.u8(0);
        return CipherKey_1.CipherKey.encode(encoder, rootKey.key);
    }
    static decode(decoder) {
        const propertiesLength = decoder.object();
        if (propertiesLength === RootKey.propertiesLength) {
            decoder.u8();
            const cipherKey = CipherKey_1.CipherKey.decode(decoder);
            if (cipherKey) {
                return RootKey.from_cipher_key(cipherKey);
            }
            throw new InputError_1.InputError.TypeError(`Given RootKey doesn't match expected signature.`, InputError_1.InputError.CODE.CASE_407);
        }
        throw new DecodeError_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
    }
}
exports.RootKey = RootKey;
RootKey.propertiesLength = 1;
//# sourceMappingURL=RootKey.js.map