"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecryptError = void 0;
const ProteusError_1 = require("./ProteusError");
class DecryptError extends ProteusError_1.ProteusError {
    constructor(message = 'Unknown decryption error', code = 2) {
        super(message, code);
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.DecryptError = DecryptError;
DecryptError.CODE = {
    CASE_200: 200,
    CASE_201: 201,
    CASE_202: 202,
    CASE_203: 203,
    CASE_204: 204,
    CASE_205: 205,
    CASE_206: 206,
    CASE_207: 207,
    CASE_208: 208,
    CASE_209: 209,
    CASE_210: 210,
    CASE_211: 211,
    CASE_212: 212,
    CASE_213: 213,
};
(function (DecryptError) {
    class DuplicateMessage extends DecryptError {
        constructor(message = 'Duplicate message', code = DecryptError.CODE.CASE_209) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecryptError.DuplicateMessage = DuplicateMessage;
    class InvalidMessage extends DecryptError {
        constructor(message = 'Invalid message', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecryptError.InvalidMessage = InvalidMessage;
    class InvalidSignature extends DecryptError {
        constructor(message = 'Invalid signature', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecryptError.InvalidSignature = InvalidSignature;
    class OutdatedMessage extends DecryptError {
        constructor(message = 'Outdated message', code = DecryptError.CODE.CASE_208) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecryptError.OutdatedMessage = OutdatedMessage;
    class PrekeyNotFound extends DecryptError {
        constructor(message = 'Pre-key not found', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecryptError.PrekeyNotFound = PrekeyNotFound;
    class RemoteIdentityChanged extends DecryptError {
        constructor(message = 'Remote identity changed', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecryptError.RemoteIdentityChanged = RemoteIdentityChanged;
    class RemoteEncryptionError extends DecryptError {
        constructor(message = 'Sending client failed to encrypt the message', code = DecryptError.CODE.CASE_213) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecryptError.RemoteEncryptionError = RemoteEncryptionError;
    class TooDistantFuture extends DecryptError {
        constructor(message = 'Message is from too distant in the future', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecryptError.TooDistantFuture = TooDistantFuture;
})(DecryptError = exports.DecryptError || (exports.DecryptError = {}));
//# sourceMappingURL=DecryptError.js.map