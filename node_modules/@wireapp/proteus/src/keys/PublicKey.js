"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicKey = void 0;
const sodium = require("libsodium-wrappers-sumo");
const InputError_1 = require("../errors/InputError");
const DecodeError_1 = require("../errors/DecodeError");
class PublicKey {
    constructor(pubEdward, pubCurve) {
        this.pub_edward = pubEdward;
        this.pub_curve = pubCurve;
    }
    verify(signature, message) {
        return sodium.crypto_sign_verify_detached(signature, message, this.pub_edward);
    }
    fingerprint() {
        return sodium.to_hex(this.pub_edward);
    }
    static encode(encoder, publicKey) {
        encoder.object(PublicKey.propertiesLength);
        encoder.u8(0);
        return encoder.bytes(publicKey.pub_edward);
    }
    static decode(decoder) {
        const propertiesLength = decoder.object();
        if (propertiesLength === PublicKey.propertiesLength) {
            decoder.u8();
            const pubEdward = new Uint8Array(decoder.bytes());
            try {
                const pubCurve = sodium.crypto_sign_ed25519_pk_to_curve25519(pubEdward);
                return new PublicKey(pubEdward, pubCurve);
            }
            catch (error) {
                throw new InputError_1.InputError.ConversionError('Could not convert public key with libsodium.', 409);
            }
        }
        throw new DecodeError_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
    }
}
exports.PublicKey = PublicKey;
PublicKey.propertiesLength = 1;
//# sourceMappingURL=PublicKey.js.map