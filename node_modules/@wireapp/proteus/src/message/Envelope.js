"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Envelope = void 0;
const cbor_1 = require("@wireapp/cbor");
const MacKey_1 = require("../derived/MacKey");
const DecodeError_1 = require("../errors/DecodeError");
const CipherMessage_1 = require("./CipherMessage");
const PreKeyMessage_1 = require("./PreKeyMessage");
class Envelope {
    constructor(macKey, message, version = 1) {
        const serializedMessage = new Uint8Array(message.serialise());
        this.version = version;
        this.mac = MacKey_1.MacKey.sign(macKey, serializedMessage);
        this.message = message;
        this._message_enc = serializedMessage;
    }
    verify(macKey) {
        return macKey.verify(this.mac, this._message_enc);
    }
    serialise() {
        const encoder = new cbor_1.Encoder();
        Envelope.encode(encoder, this);
        return encoder.get_buffer();
    }
    static deserialise(buf) {
        const decoder = new cbor_1.Decoder(buf);
        return Envelope.decode(decoder);
    }
    static encode(encoder, envelope) {
        encoder.object(3);
        encoder.u8(0);
        encoder.u8(envelope.version);
        encoder.u8(1);
        encoder.object(1);
        encoder.u8(0);
        encoder.bytes(envelope.mac);
        encoder.u8(2);
        return encoder.bytes(envelope._message_enc);
    }
    static decode(decoder) {
        const propertiesLength = decoder.object();
        if (propertiesLength === 3) {
            decoder.u8();
            const version = decoder.u8();
            decoder.u8();
            decoder.object();
            decoder.u8();
            const mac = new Uint8Array(decoder.bytes());
            decoder.u8();
            const encodedMessage = new Uint8Array(decoder.bytes());
            const message = Envelope.deserialiseMessage(encodedMessage.buffer);
            const envelope = new Envelope(new MacKey_1.MacKey(mac), message, version);
            envelope.mac = mac;
            return envelope;
        }
        throw new DecodeError_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
    }
    static deserialiseMessage(buf) {
        const decoder = new cbor_1.Decoder(buf);
        switch (decoder.u8()) {
            case 1:
                return CipherMessage_1.CipherMessage.decode(decoder);
            case 2:
                return PreKeyMessage_1.PreKeyMessage.decode(decoder);
            default:
                throw new DecodeError_1.DecodeError.InvalidType('Unrecognised message type', DecodeError_1.DecodeError.CODE.CASE_302);
        }
    }
}
exports.Envelope = Envelope;
//# sourceMappingURL=Envelope.js.map