"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreKeyMessage = void 0;
const cbor_1 = require("@wireapp/cbor");
const DecodeError_1 = require("../errors/DecodeError");
const InputError_1 = require("../errors/InputError");
const IdentityKey_1 = require("../keys/IdentityKey");
const PublicKey_1 = require("../keys/PublicKey");
const CipherMessage_1 = require("./CipherMessage");
const Message_1 = require("./Message");
class PreKeyMessage extends Message_1.Message {
    constructor(prekeyId, baseKey, identityKey, message) {
        super();
        this.prekey_id = prekeyId;
        this.base_key = baseKey;
        this.identity_key = identityKey;
        this.message = message;
    }
    static encode(encoder, preKeyMessage) {
        encoder.object(PreKeyMessage.propertiesLength);
        encoder.u8(0);
        encoder.u16(preKeyMessage.prekey_id);
        encoder.u8(1);
        PublicKey_1.PublicKey.encode(encoder, preKeyMessage.base_key);
        encoder.u8(2);
        IdentityKey_1.IdentityKey.encode(encoder, preKeyMessage.identity_key);
        encoder.u8(3);
        return CipherMessage_1.CipherMessage.encode(encoder, preKeyMessage.message);
    }
    serialise() {
        const encoder = new cbor_1.Encoder();
        encoder.u8(2);
        PreKeyMessage.encode(encoder, this);
        return encoder.get_buffer();
    }
    static decode(decoder) {
        const propertiesLength = decoder.object();
        if (propertiesLength === PreKeyMessage.propertiesLength) {
            decoder.u8();
            const prekeyId = Number(decoder.u16());
            decoder.u8();
            const baseKey = PublicKey_1.PublicKey.decode(decoder);
            decoder.u8();
            const identityKey = IdentityKey_1.IdentityKey.decode(decoder);
            decoder.u8();
            const message = CipherMessage_1.CipherMessage.decode(decoder);
            if (!isNaN(prekeyId) && baseKey && identityKey && message) {
                return new PreKeyMessage(prekeyId, baseKey, identityKey, message);
            }
            throw new InputError_1.InputError.TypeError(`Given PreKeyMessage doesn't match expected signature.`, InputError_1.InputError.CODE.CASE_406);
        }
        throw new DecodeError_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
    }
}
exports.PreKeyMessage = PreKeyMessage;
PreKeyMessage.propertiesLength = 4;
//# sourceMappingURL=PreKeyMessage.js.map