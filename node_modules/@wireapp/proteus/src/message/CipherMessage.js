"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CipherMessage = void 0;
const cbor_1 = require("@wireapp/cbor");
const PublicKey_1 = require("../keys/PublicKey");
const SessionTag_1 = require("./SessionTag");
const Message_1 = require("./Message");
const InputError_1 = require("../errors/InputError");
const DecodeError_1 = require("../errors/DecodeError");
class CipherMessage extends Message_1.Message {
    constructor(sessionTag, counter, prevCounter, ratchetKey, cipherText) {
        super();
        this.session_tag = sessionTag;
        this.counter = counter;
        this.prev_counter = prevCounter;
        this.ratchet_key = ratchetKey;
        this.cipher_text = cipherText;
    }
    static encode(encoder, cipherMessage) {
        encoder.object(CipherMessage.propertiesLength);
        encoder.u8(0);
        SessionTag_1.SessionTag.encode(encoder, cipherMessage.session_tag);
        encoder.u8(1);
        encoder.u32(cipherMessage.counter);
        encoder.u8(2);
        encoder.u32(cipherMessage.prev_counter);
        encoder.u8(3);
        PublicKey_1.PublicKey.encode(encoder, cipherMessage.ratchet_key);
        encoder.u8(4);
        return encoder.bytes(cipherMessage.cipher_text);
    }
    static decode(decoder) {
        const propertiesLength = decoder.object();
        if (propertiesLength === CipherMessage.propertiesLength) {
            decoder.u8();
            const sessionTag = SessionTag_1.SessionTag.decode(decoder);
            decoder.u8();
            const counter = Number(decoder.u32());
            decoder.u8();
            const prevCounter = Number(decoder.u32());
            decoder.u8();
            const ratchetKey = PublicKey_1.PublicKey.decode(decoder);
            decoder.u8();
            const cipherText = new Uint8Array(decoder.bytes());
            if (sessionTag && !isNaN(counter) && !isNaN(prevCounter) && ratchetKey && cipherText) {
                return new CipherMessage(sessionTag, counter, prevCounter, ratchetKey, cipherText);
            }
            throw new InputError_1.InputError.TypeError(`Given CipherMessage doesn't match expected signature.`, InputError_1.InputError.CODE.CASE_405);
        }
        throw new DecodeError_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
    }
    serialise() {
        const encoder = new cbor_1.Encoder();
        encoder.u8(1);
        CipherMessage.encode(encoder, this);
        return encoder.get_buffer();
    }
}
exports.CipherMessage = CipherMessage;
CipherMessage.propertiesLength = 5;
//# sourceMappingURL=CipherMessage.js.map