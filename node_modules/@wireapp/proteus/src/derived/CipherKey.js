"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CipherKey = void 0;
const sodium = require("libsodium-wrappers-sumo");
const DecodeError_1 = require("../errors/DecodeError");
class CipherKey {
    constructor(key) {
        this.key = key;
    }
    encrypt(plaintext, nonce) {
        if (plaintext instanceof ArrayBuffer && plaintext.byteLength !== undefined) {
            plaintext = new Uint8Array(plaintext);
        }
        return sodium.crypto_stream_chacha20_xor(plaintext, nonce, this.key, 'uint8array');
    }
    decrypt(ciphertext, nonce) {
        return this.encrypt(ciphertext, nonce);
    }
    static encode(encoder, cipherKey) {
        encoder.object(CipherKey.propertiesLength);
        encoder.u8(0);
        return encoder.bytes(cipherKey.key);
    }
    static decode(decoder) {
        const propertiesLength = decoder.object();
        if (propertiesLength === CipherKey.propertiesLength) {
            decoder.u8();
            const keyBytes = new Uint8Array(decoder.bytes());
            return new CipherKey(keyBytes);
        }
        throw new DecodeError_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
    }
}
exports.CipherKey = CipherKey;
CipherKey.propertiesLength = 1;
//# sourceMappingURL=CipherKey.js.map