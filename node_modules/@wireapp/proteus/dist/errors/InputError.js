"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputError = void 0;
const ProteusError_1 = require("./ProteusError");
let InputError = /** @class */ (() => {
    class InputError extends ProteusError_1.ProteusError {
        constructor(message = 'Invalid input', code = 4) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    InputError.CODE = {
        CASE_400: 400,
        CASE_401: 401,
        CASE_402: 402,
        CASE_403: 403,
        CASE_404: 404,
        CASE_405: 405,
        CASE_406: 406,
        CASE_407: 407,
        CASE_408: 408,
        CASE_409: 409,
    };
    return InputError;
})();
exports.InputError = InputError;
(function (InputError) {
    class RangeError extends InputError {
        constructor(message = 'Invalid array length', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    InputError.RangeError = RangeError;
    class TypeError extends InputError {
        constructor(message = 'Invalid type', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    InputError.TypeError = TypeError;
    class ConversionError extends InputError {
        constructor(message = 'Conversion error', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    InputError.ConversionError = ConversionError;
})(InputError = exports.InputError || (exports.InputError = {}));
exports.InputError = InputError;
//# sourceMappingURL=InputError.js.map