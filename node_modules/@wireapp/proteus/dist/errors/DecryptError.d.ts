import { ProteusError } from './ProteusError';
export declare class DecryptError extends ProteusError {
    static readonly CODE: {
        CASE_200: number;
        CASE_201: number;
        CASE_202: number;
        CASE_203: number;
        CASE_204: number;
        CASE_205: number;
        CASE_206: number;
        CASE_207: number;
        CASE_208: number;
        CASE_209: number;
        CASE_210: number;
        CASE_211: number;
        CASE_212: number;
        /** REMOTE_ENCRYPTION_FAILURE: Created by the receiver when getting a decryption failure symbol (ðŸ’£) */
        CASE_213: number;
    };
    constructor(message?: string, code?: number);
}
export declare namespace DecryptError {
    class DuplicateMessage extends DecryptError {
        constructor(message?: string, code?: number);
    }
    class InvalidMessage extends DecryptError {
        constructor(message?: string, code?: number);
    }
    class InvalidSignature extends DecryptError {
        constructor(message?: string, code?: number);
    }
    class OutdatedMessage extends DecryptError {
        constructor(message?: string, code?: number);
    }
    class PrekeyNotFound extends DecryptError {
        constructor(message?: string, code?: number);
    }
    class RemoteIdentityChanged extends DecryptError {
        constructor(message?: string, code?: number);
    }
    class RemoteEncryptionError extends DecryptError {
        constructor(message?: string, code?: number);
    }
    class TooDistantFuture extends DecryptError {
        constructor(message?: string, code?: number);
    }
}
