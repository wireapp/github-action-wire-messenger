"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecodeError = void 0;
const ProteusError_1 = require("./ProteusError");
let DecodeError = /** @class */ (() => {
    class DecodeError extends ProteusError_1.ProteusError {
        constructor(message = 'Unknown decoding error', code = 3) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecodeError.CODE = {
        CASE_300: 300,
        CASE_301: 301,
        CASE_302: 302,
        CASE_303: 303,
    };
    return DecodeError;
})();
exports.DecodeError = DecodeError;
(function (DecodeError) {
    class InvalidType extends DecodeError {
        constructor(message = 'Invalid type', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecodeError.InvalidType = InvalidType;
    class InvalidArrayLen extends DecodeError {
        constructor(message = 'Invalid array length', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecodeError.InvalidArrayLen = InvalidArrayLen;
    class LocalIdentityChanged extends DecodeError {
        constructor(message = 'Local identity changed', code) {
            super(message, code);
            Object.setPrototypeOf(this, new.target.prototype);
        }
    }
    DecodeError.LocalIdentityChanged = LocalIdentityChanged;
})(DecodeError = exports.DecodeError || (exports.DecodeError = {}));
exports.DecodeError = DecodeError;
//# sourceMappingURL=DecodeError.js.map