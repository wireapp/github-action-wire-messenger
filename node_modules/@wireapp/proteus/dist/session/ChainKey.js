"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainKey = void 0;
const DerivedSecrets_1 = require("../derived/DerivedSecrets");
const MacKey_1 = require("../derived/MacKey");
const MessageKeys_1 = require("./MessageKeys");
const errors_1 = require("../errors");
let ChainKey = /** @class */ (() => {
    class ChainKey {
        constructor(key, index = -1) {
            this.idx = index;
            this.key = key;
        }
        static from_mac_key(key, counter) {
            return new ChainKey(key, counter);
        }
        next() {
            const key = new MacKey_1.MacKey(this.key.sign('1'));
            const index = this.idx + 1;
            return new ChainKey(key, index);
        }
        message_keys() {
            const base = this.key.sign('0');
            const derivedSecrets = DerivedSecrets_1.DerivedSecrets.kdf_without_salt(base, 'hash_ratchet');
            return new MessageKeys_1.MessageKeys(derivedSecrets.cipher_key, derivedSecrets.mac_key, this.idx);
        }
        encode(encoder) {
            encoder.object(ChainKey.propertiesLength);
            encoder.u8(0);
            this.key.encode(encoder);
            encoder.u8(1);
            return encoder.u32(this.idx);
        }
        static decode(decoder) {
            const propertiesLength = decoder.object();
            if (propertiesLength === ChainKey.propertiesLength) {
                decoder.u8();
                const key = MacKey_1.MacKey.decode(decoder);
                decoder.u8();
                const index = decoder.u32();
                return new ChainKey(key, index);
            }
            throw new errors_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
        }
    }
    ChainKey.propertiesLength = 2;
    return ChainKey;
})();
exports.ChainKey = ChainKey;
//# sourceMappingURL=ChainKey.js.map