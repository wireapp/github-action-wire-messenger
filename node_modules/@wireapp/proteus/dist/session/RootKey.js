"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootKey = void 0;
const CipherKey_1 = require("../derived/CipherKey");
const DerivedSecrets_1 = require("../derived/DerivedSecrets");
const InputError_1 = require("../errors/InputError");
const ChainKey_1 = require("./ChainKey");
const errors_1 = require("../errors");
let RootKey = /** @class */ (() => {
    class RootKey {
        constructor(key) {
            this.key = key;
        }
        /**
         * @param cipherKey Cipher key generated by derived secrets
         */
        static from_cipher_key(cipherKey) {
            return new RootKey(cipherKey);
        }
        /**
         * @param ours Our key pair
         * @param theirs Their public key
         */
        dh_ratchet(ours, theirs) {
            const secret = ours.secret_key.shared_secret(theirs);
            const derivedSecrets = DerivedSecrets_1.DerivedSecrets.kdf(secret, this.key.key, 'dh_ratchet');
            return [RootKey.from_cipher_key(derivedSecrets.cipher_key), ChainKey_1.ChainKey.from_mac_key(derivedSecrets.mac_key, 0)];
        }
        encode(encoder) {
            encoder.object(RootKey.propertiesLength);
            encoder.u8(0);
            return this.key.encode(encoder);
        }
        static decode(decoder) {
            const propertiesLength = decoder.object();
            if (propertiesLength === RootKey.propertiesLength) {
                decoder.u8();
                const cipherKey = CipherKey_1.CipherKey.decode(decoder);
                if (cipherKey) {
                    return RootKey.from_cipher_key(cipherKey);
                }
                throw new InputError_1.InputError.TypeError(`Given RootKey doesn't match expected signature.`, InputError_1.InputError.CODE.CASE_407);
            }
            throw new errors_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
        }
    }
    RootKey.propertiesLength = 1;
    return RootKey;
})();
exports.RootKey = RootKey;
//# sourceMappingURL=RootKey.js.map