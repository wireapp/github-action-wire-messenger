"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageKeys = void 0;
const CipherKey_1 = require("../derived/CipherKey");
const MacKey_1 = require("../derived/MacKey");
const errors_1 = require("../errors");
let MessageKeys = /** @class */ (() => {
    class MessageKeys {
        constructor(cipherKey, macKey, counter) {
            this.cipher_key = cipherKey;
            this.mac_key = macKey;
            this.counter = counter;
        }
        _counter_as_nonce() {
            const nonce = new ArrayBuffer(8);
            new DataView(nonce).setUint32(0, this.counter);
            return new Uint8Array(nonce);
        }
        encrypt(plaintext) {
            return this.cipher_key.encrypt(plaintext, this._counter_as_nonce());
        }
        decrypt(ciphertext) {
            return this.cipher_key.decrypt(ciphertext, this._counter_as_nonce());
        }
        encode(encoder) {
            encoder.object(MessageKeys.propertiesLength);
            encoder.u8(0);
            this.cipher_key.encode(encoder);
            encoder.u8(1);
            this.mac_key.encode(encoder);
            encoder.u8(2);
            return encoder.u32(this.counter);
        }
        static decode(decoder) {
            const propertiesLength = decoder.object();
            if (propertiesLength === MessageKeys.propertiesLength) {
                decoder.u8();
                const cipherKey = CipherKey_1.CipherKey.decode(decoder);
                decoder.u8();
                const macKey = MacKey_1.MacKey.decode(decoder);
                decoder.u8();
                const counter = decoder.u32();
                return new MessageKeys(cipherKey, macKey, counter);
            }
            throw new errors_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
        }
    }
    MessageKeys.propertiesLength = 3;
    return MessageKeys;
})();
exports.MessageKeys = MessageKeys;
//# sourceMappingURL=MessageKeys.js.map