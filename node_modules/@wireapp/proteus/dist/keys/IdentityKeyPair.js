"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityKeyPair = void 0;
const CBOR = require("@wireapp/cbor");
const IdentityKey_1 = require("./IdentityKey");
const KeyPair_1 = require("./KeyPair");
const SecretKey_1 = require("./SecretKey");
const errors_1 = require("../errors");
let IdentityKeyPair = /** @class */ (() => {
    class IdentityKeyPair {
        constructor(public_key, secret_key, version = -1) {
            this.public_key = public_key;
            this.secret_key = secret_key;
            this.version = version;
        }
        static new() {
            return __awaiter(this, void 0, void 0, function* () {
                const keyPair = yield KeyPair_1.KeyPair.new();
                return new IdentityKeyPair(new IdentityKey_1.IdentityKey(keyPair.public_key), keyPair.secret_key, 1);
            });
        }
        serialise() {
            const encoder = new CBOR.Encoder();
            this.encode(encoder);
            return encoder.get_buffer();
        }
        static deserialise(buf) {
            const decoder = new CBOR.Decoder(buf);
            return IdentityKeyPair.decode(decoder);
        }
        encode(encoder) {
            encoder.object(IdentityKeyPair.propertiesLength);
            encoder.u8(0);
            encoder.u8(this.version);
            encoder.u8(1);
            this.secret_key.encode(encoder);
            encoder.u8(2);
            return this.public_key.encode(encoder);
        }
        static decode(decoder) {
            const propertiesLength = decoder.object();
            if (propertiesLength === IdentityKeyPair.propertiesLength) {
                decoder.u8();
                const version = decoder.u8();
                decoder.u8();
                const secretKey = SecretKey_1.SecretKey.decode(decoder);
                decoder.u8();
                const publicKey = IdentityKey_1.IdentityKey.decode(decoder);
                return new IdentityKeyPair(publicKey, secretKey, version);
            }
            throw new errors_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
        }
    }
    IdentityKeyPair.propertiesLength = 3;
    return IdentityKeyPair;
})();
exports.IdentityKeyPair = IdentityKeyPair;
//# sourceMappingURL=IdentityKeyPair.js.map