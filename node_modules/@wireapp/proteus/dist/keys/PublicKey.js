"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicKey = void 0;
const sodium = require("libsodium-wrappers-sumo");
const InputError_1 = require("../errors/InputError");
const errors_1 = require("../errors");
let PublicKey = /** @class */ (() => {
    class PublicKey {
        constructor(pubEdward, pubCurve) {
            this.pub_edward = pubEdward;
            this.pub_curve = pubCurve;
        }
        /**
         * This function can be used to verify a message signature.
         *
         * @param signature The signature to verify
         * @param message The message from which the signature was computed.
         * @returns `true` if the signature is valid, `false` otherwise.
         */
        verify(signature, message) {
            return sodium.crypto_sign_verify_detached(signature, message, this.pub_edward);
        }
        fingerprint() {
            return sodium.to_hex(this.pub_edward);
        }
        encode(encoder) {
            encoder.object(PublicKey.propertiesLength);
            encoder.u8(0);
            return encoder.bytes(this.pub_edward);
        }
        static decode(decoder) {
            const propertiesLength = decoder.object();
            if (propertiesLength === PublicKey.propertiesLength) {
                decoder.u8();
                const pubEdward = new Uint8Array(decoder.bytes());
                try {
                    const pubCurve = sodium.crypto_sign_ed25519_pk_to_curve25519(pubEdward);
                    return new PublicKey(pubEdward, pubCurve);
                }
                catch (error) {
                    throw new InputError_1.InputError.ConversionError('Could not convert public key with libsodium.', 409);
                }
            }
            throw new errors_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
        }
    }
    PublicKey.propertiesLength = 1;
    return PublicKey;
})();
exports.PublicKey = PublicKey;
//# sourceMappingURL=PublicKey.js.map