"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreKey = void 0;
const CBOR = require("@wireapp/cbor");
const InputError_1 = require("../errors/InputError");
const KeyPair_1 = require("./KeyPair");
const errors_1 = require("../errors");
/**
 * Pre-generated (and regularly refreshed) pre-keys.
 * A Pre-Shared Key contains the public long-term identity and ephemeral handshake keys for the initial triple DH.
 */
let PreKey = /** @class */ (() => {
    class PreKey {
        constructor(keyPair, keyId = -1, version = -1) {
            this.key_id = keyId;
            this.key_pair = keyPair;
            this.version = version;
        }
        static new(preKeyId) {
            return __awaiter(this, void 0, void 0, function* () {
                this.validate_pre_key_id(preKeyId);
                const keyPair = yield KeyPair_1.KeyPair.new();
                return new PreKey(keyPair, preKeyId, 1);
            });
        }
        static validate_pre_key_id(preKeyId) {
            if (preKeyId === undefined) {
                throw new InputError_1.InputError.TypeError('PreKey ID is undefined.', InputError_1.InputError.CODE.CASE_404);
            }
            if (typeof preKeyId === 'string') {
                throw new InputError_1.InputError.TypeError(`PreKey ID "${preKeyId}" is a string.`, InputError_1.InputError.CODE.CASE_403);
            }
            if (preKeyId % 1 !== 0) {
                throw new InputError_1.InputError.TypeError(`PreKey ID "${preKeyId}" is a floating-point number.`, InputError_1.InputError.CODE.CASE_403);
            }
            if (preKeyId < 0 || preKeyId > PreKey.MAX_PREKEY_ID) {
                const message = `PreKey ID (${preKeyId}) must be between or equal to 0 and ${PreKey.MAX_PREKEY_ID}.`;
                throw new InputError_1.InputError.RangeError(message, InputError_1.InputError.CODE.CASE_400);
            }
        }
        static last_resort() {
            return PreKey.new(PreKey.MAX_PREKEY_ID);
        }
        static generate_prekeys(start, size) {
            return __awaiter(this, void 0, void 0, function* () {
                this.validate_pre_key_id(start);
                this.validate_pre_key_id(size);
                if (size === 0) {
                    return [];
                }
                return Promise.all(Array.from({ length: size }).map((_, index) => PreKey.new((start + index) % PreKey.MAX_PREKEY_ID)));
            });
        }
        serialise() {
            const encoder = new CBOR.Encoder();
            this.encode(encoder);
            return encoder.get_buffer();
        }
        static deserialise(buf) {
            return PreKey.decode(new CBOR.Decoder(buf));
        }
        encode(encoder) {
            encoder.object(PreKey.propertiesLength);
            encoder.u8(0);
            encoder.u8(this.version);
            encoder.u8(1);
            encoder.u16(this.key_id);
            encoder.u8(2);
            return this.key_pair.encode(encoder);
        }
        static decode(decoder) {
            const propertiesLength = decoder.object();
            if (propertiesLength === PreKey.propertiesLength) {
                decoder.u8();
                const version = decoder.u8();
                decoder.u8();
                const keyId = decoder.u16();
                decoder.u8();
                const keyPair = KeyPair_1.KeyPair.decode(decoder);
                return new PreKey(keyPair, keyId, version);
            }
            throw new errors_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
        }
    }
    PreKey.MAX_PREKEY_ID = 0xffff;
    PreKey.propertiesLength = 3;
    return PreKey;
})();
exports.PreKey = PreKey;
//# sourceMappingURL=PreKey.js.map