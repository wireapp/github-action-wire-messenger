import * as CBOR from '@wireapp/cbor';
import * as sodium from 'libsodium-wrappers-sumo';
import { PublicKey } from './PublicKey';
import { SecretKey } from './SecretKey';
/** Construct an ephemeral key pair. */
export declare class KeyPair {
    readonly public_key: PublicKey;
    readonly secret_key: SecretKey;
    private static readonly propertiesLength;
    constructor(publicKey: PublicKey, secretKey: SecretKey);
    static new(): Promise<KeyPair>;
    /**
     * Ed25519 keys can be converted to Curve25519 keys, so that the same key pair can be
     * used both for authenticated encryption (`crypto_box`) and for signatures (`crypto_sign`).
     * @param ed25519KeyPair Key pair based on Edwards-curve (Ed25519)
     * @returns Constructed private key
     * @see https://download.libsodium.org/doc/advanced/ed25519-curve25519.html
     */
    static construct_private_key(ed25519_key_pair: sodium.KeyPair): SecretKey;
    /**
     * @param ed25519KeyPair Key pair based on Edwards-curve (Ed25519)
     * @returns Constructed public key
     */
    static construct_public_key(ed25519_key_pair: sodium.KeyPair): PublicKey;
    encode(encoder: CBOR.Encoder): CBOR.Encoder;
    static decode(decoder: CBOR.Decoder): KeyPair;
}
