"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretKey = void 0;
const sodium = require("libsodium-wrappers-sumo");
const InputError_1 = require("../errors/InputError");
const ArrayUtil = require("../util/ArrayUtil");
const errors_1 = require("../errors");
let SecretKey = /** @class */ (() => {
    class SecretKey {
        constructor(secEdward, secCurve) {
            this.sec_edward = secEdward;
            this.sec_curve = secCurve;
        }
        /**
         * This function can be used to compute a message signature.
         * @param message Message to be signed
         * @returns A message signature
         */
        sign(message) {
            return sodium.crypto_sign_detached(message, this.sec_edward);
        }
        /**
         * This function can be used to compute a shared secret given a user's secret key and another
         * user's public key.
         * @param publicKey Another user's public key
         * @returns Array buffer view of the computed shared secret
         */
        shared_secret(publicKey) {
            const sharedSecret = sodium.crypto_scalarmult(this.sec_curve, publicKey.pub_curve);
            ArrayUtil.assert_is_not_zeros(sharedSecret);
            return sharedSecret;
        }
        encode(encoder) {
            encoder.object(SecretKey.propertiesLength);
            encoder.u8(0);
            return encoder.bytes(this.sec_edward);
        }
        static decode(decoder) {
            const propertiesLength = decoder.object();
            if (propertiesLength === SecretKey.propertiesLength) {
                decoder.u8();
                const secEdward = new Uint8Array(decoder.bytes());
                try {
                    const secCurve = sodium.crypto_sign_ed25519_sk_to_curve25519(secEdward);
                    return new SecretKey(secEdward, secCurve);
                }
                catch (error) {
                    throw new InputError_1.InputError.ConversionError('Could not convert secret key with libsodium.', 408);
                }
            }
            throw new errors_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
        }
    }
    SecretKey.propertiesLength = 1;
    return SecretKey;
})();
exports.SecretKey = SecretKey;
//# sourceMappingURL=SecretKey.js.map