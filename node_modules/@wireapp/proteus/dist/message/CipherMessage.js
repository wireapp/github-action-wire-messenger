"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CipherMessage = void 0;
const InputError_1 = require("../errors/InputError");
const PublicKey_1 = require("../keys/PublicKey");
const Message_1 = require("./Message");
const SessionTag_1 = require("./SessionTag");
const errors_1 = require("../errors");
let CipherMessage = /** @class */ (() => {
    class CipherMessage extends Message_1.Message {
        constructor(sessionTag, counter, prevCounter, ratchetKey, cipherText) {
            super();
            this.session_tag = sessionTag;
            this.counter = counter;
            this.prev_counter = prevCounter;
            this.ratchet_key = ratchetKey;
            this.cipher_text = cipherText;
        }
        encode(encoder) {
            encoder.object(CipherMessage.propertiesLength);
            encoder.u8(0);
            this.session_tag.encode(encoder);
            encoder.u8(1);
            encoder.u32(this.counter);
            encoder.u8(2);
            encoder.u32(this.prev_counter);
            encoder.u8(3);
            this.ratchet_key.encode(encoder);
            encoder.u8(4);
            return encoder.bytes(this.cipher_text);
        }
        static decode(decoder) {
            const propertiesLength = decoder.object();
            if (propertiesLength === CipherMessage.propertiesLength) {
                decoder.u8();
                const sessionTag = SessionTag_1.SessionTag.decode(decoder);
                decoder.u8();
                const counter = Number(decoder.u32());
                decoder.u8();
                const prevCounter = Number(decoder.u32());
                decoder.u8();
                const ratchetKey = PublicKey_1.PublicKey.decode(decoder);
                decoder.u8();
                const cipherText = new Uint8Array(decoder.bytes());
                if (sessionTag && !isNaN(counter) && !isNaN(prevCounter) && ratchetKey && cipherText) {
                    return new CipherMessage(sessionTag, counter, prevCounter, ratchetKey, cipherText);
                }
                throw new InputError_1.InputError.TypeError(`Given CipherMessage doesn't match expected signature.`, InputError_1.InputError.CODE.CASE_405);
            }
            throw new errors_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
        }
    }
    CipherMessage.propertiesLength = 5;
    return CipherMessage;
})();
exports.CipherMessage = CipherMessage;
//# sourceMappingURL=CipherMessage.js.map