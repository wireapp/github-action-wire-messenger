"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreKeyMessage = void 0;
const IdentityKey_1 = require("../keys/IdentityKey");
const PublicKey_1 = require("../keys/PublicKey");
const InputError_1 = require("../errors/InputError");
const CipherMessage_1 = require("./CipherMessage");
const Message_1 = require("./Message");
const errors_1 = require("../errors");
let PreKeyMessage = /** @class */ (() => {
    class PreKeyMessage extends Message_1.Message {
        constructor(prekeyId, baseKey, identityKey, message) {
            super();
            this.prekey_id = prekeyId;
            this.base_key = baseKey;
            this.identity_key = identityKey;
            this.message = message;
        }
        encode(encoder) {
            encoder.object(PreKeyMessage.propertiesLength);
            encoder.u8(0);
            encoder.u16(this.prekey_id);
            encoder.u8(1);
            this.base_key.encode(encoder);
            encoder.u8(2);
            this.identity_key.encode(encoder);
            encoder.u8(3);
            return this.message.encode(encoder);
        }
        static decode(decoder) {
            const propertiesLength = decoder.object();
            if (propertiesLength === PreKeyMessage.propertiesLength) {
                decoder.u8();
                const prekeyId = Number(decoder.u16());
                decoder.u8();
                const baseKey = PublicKey_1.PublicKey.decode(decoder);
                decoder.u8();
                const identityKey = IdentityKey_1.IdentityKey.decode(decoder);
                decoder.u8();
                const message = CipherMessage_1.CipherMessage.decode(decoder);
                if (!isNaN(prekeyId) && baseKey && identityKey && message) {
                    return new PreKeyMessage(prekeyId, baseKey, identityKey, message);
                }
                throw new InputError_1.InputError.TypeError(`Given PreKeyMessage doesn't match expected signature.`, InputError_1.InputError.CODE.CASE_406);
            }
            throw new errors_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
        }
    }
    PreKeyMessage.propertiesLength = 4;
    return PreKeyMessage;
})();
exports.PreKeyMessage = PreKeyMessage;
//# sourceMappingURL=PreKeyMessage.js.map