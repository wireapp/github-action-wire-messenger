"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Envelope = void 0;
const CBOR = require("@wireapp/cbor");
const MacKey_1 = require("../derived/MacKey");
const Message_1 = require("./Message");
const errors_1 = require("../errors");
class Envelope {
    constructor(macKey, message, version = 1) {
        const serializedMessage = new Uint8Array(message.serialise());
        this.version = version;
        this.mac = macKey.sign(serializedMessage);
        this.message = message;
        this._message_enc = serializedMessage;
    }
    /** @param macKey The remote party's MacKey */
    verify(macKey) {
        return macKey.verify(this.mac, this._message_enc);
    }
    /** @returns The serialized message envelope */
    serialise() {
        const encoder = new CBOR.Encoder();
        this.encode(encoder);
        return encoder.get_buffer();
    }
    static deserialise(buf) {
        const decoder = new CBOR.Decoder(buf);
        return Envelope.decode(decoder);
    }
    encode(encoder) {
        encoder.object(3);
        encoder.u8(0);
        encoder.u8(this.version);
        encoder.u8(1);
        encoder.object(1);
        encoder.u8(0);
        encoder.bytes(this.mac);
        encoder.u8(2);
        return encoder.bytes(this._message_enc);
    }
    static decode(decoder) {
        const propertiesLength = decoder.object();
        if (propertiesLength === 3) {
            decoder.u8();
            const version = decoder.u8();
            decoder.u8();
            decoder.object();
            decoder.u8();
            const mac = new Uint8Array(decoder.bytes());
            decoder.u8();
            const encodedMessage = new Uint8Array(decoder.bytes());
            const message = Message_1.Message.deserialise(encodedMessage.buffer);
            const envelope = new Envelope(new MacKey_1.MacKey(mac), message, version);
            envelope.mac = mac;
            return envelope;
        }
        throw new errors_1.DecodeError(`Unexpected number of properties: "${propertiesLength}"`);
    }
}
exports.Envelope = Envelope;
//# sourceMappingURL=Envelope.js.map