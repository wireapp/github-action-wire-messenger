"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_client_1 = require("@wireapp/api-client");
const store_engine_1 = require("@wireapp/store-engine");
const uuidjs_1 = __importDefault(require("uuidjs"));
const Account_1 = require("../Account");
describe('AssetService', () => {
    let account;
    beforeAll(async () => {
        const client = new api_client_1.APIClient({ urls: api_client_1.APIClient.BACKEND.STAGING });
        account = new Account_1.Account(client);
        await account.initServices(new store_engine_1.MemoryEngine());
    });
    describe('"uploadImageAsset"', () => {
        it('builds an encrypted asset payload', async () => {
            const assetServerData = {
                key: `3-2-${uuidjs_1.default.genV4().toString()}`,
                keyBytes: Buffer.from(uuidjs_1.default.genV4().toString()),
                sha256: uuidjs_1.default.genV4().toString(),
                token: uuidjs_1.default.genV4().toString(),
            };
            const assetService = account.service.conversation['assetService'];
            const image = {
                data: Buffer.from([1, 2, 3]),
                height: 600,
                type: 'image/png',
                width: 600,
            };
            spyOn(assetService, 'postAsset').and.returnValue(Promise.resolve(assetServerData));
            const asset = await assetService.uploadImageAsset(image);
            expect(asset).toEqual(jasmine.objectContaining({
                key: assetServerData.key,
                keyBytes: assetServerData.keyBytes,
                sha256: assetServerData.sha256,
                token: assetServerData.token,
            }));
        });
    });
});
//# sourceMappingURL=AssetService.test.node.js.map