"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetService = void 0;
const AssetCryptography = __importStar(require("../cryptography/AssetCryptography.node"));
class AssetService {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    async postAsset(plainText, options, progressCallback) {
        const { cipherText, keyBytes, sha256 } = await AssetCryptography.encryptAsset({
            plainText,
            algorithm: options === null || options === void 0 ? void 0 : options.algorithm,
            hash: options === null || options === void 0 ? void 0 : options.hash,
        });
        const request = await this.apiClient.asset.api.postAsset(new Uint8Array(cipherText), options, progressCallback);
        const { key, token } = await request.response;
        return {
            cipherText,
            key,
            keyBytes,
            sha256,
            token,
        };
    }
    uploadImageAsset(image, options) {
        return this.postAsset(image.data, options);
    }
    uploadFileAsset(file, options) {
        return this.postAsset(file.data, options);
    }
}
exports.AssetService = AssetService;
//# sourceMappingURL=AssetService.js.map