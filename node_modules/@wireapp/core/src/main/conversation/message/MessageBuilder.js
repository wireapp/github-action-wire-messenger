"use strict";
/*
 * Wire
 * Copyright (C) 2019 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageBuilder = void 0;
const protocol_messaging_1 = require("@wireapp/protocol-messaging");
const uuidjs_1 = __importDefault(require("uuidjs"));
const __1 = require("..");
const CompositeContentBuilder_1 = require("./CompositeContentBuilder");
const TextContentBuilder_1 = require("./TextContentBuilder");
class MessageBuilder {
    constructor(apiClient, assetService) {
        this.apiClient = apiClient;
        this.assetService = assetService;
    }
    createEditedText({ conversationId, messageId = MessageBuilder.createId(), newMessageText, originalMessageId, }) {
        const content = {
            originalMessageId,
            text: newMessageText,
        };
        const payloadBundle = {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.MESSAGE_EDIT,
        };
        return new TextContentBuilder_1.TextContentBuilder(payloadBundle);
    }
    async createFileData({ conversationId, cipherOptions, expectsReadConfirmation, file, legalHoldStatus, originalMessageId, }) {
        const imageAsset = await this.assetService.uploadFileAsset(file, Object.assign({}, cipherOptions));
        const content = {
            asset: imageAsset,
            expectsReadConfirmation,
            file,
            legalHoldStatus,
        };
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: originalMessageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.ASSET,
        };
    }
    createFileMetadata({ conversationId, expectsReadConfirmation, legalHoldStatus, messageId = MessageBuilder.createId(), metaData, }) {
        const content = {
            expectsReadConfirmation,
            legalHoldStatus,
            metaData,
        };
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.ASSET_META,
        };
    }
    async createFileAbort({ conversationId, expectsReadConfirmation, legalHoldStatus, originalMessageId, reason, }) {
        const content = {
            expectsReadConfirmation,
            legalHoldStatus,
            reason,
        };
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: originalMessageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.ASSET_ABORT,
        };
    }
    async createImage({ conversationId, cipherOptions, expectsReadConfirmation, image, legalHoldStatus, messageId = MessageBuilder.createId(), }) {
        const imageAsset = await this.assetService.uploadImageAsset(image, Object.assign({}, cipherOptions));
        const content = {
            asset: imageAsset,
            expectsReadConfirmation,
            image,
            legalHoldStatus,
        };
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.ASSET_IMAGE,
        };
    }
    createLocation({ conversationId, location, messageId = MessageBuilder.createId(), }) {
        return {
            content: location,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.LOCATION,
        };
    }
    createCall({ content, conversationId, messageId = MessageBuilder.createId() }) {
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.CALL,
        };
    }
    createReaction({ conversationId, messageId = MessageBuilder.createId(), reaction, }) {
        return {
            content: reaction,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.REACTION,
        };
    }
    createText({ conversationId, messageId = MessageBuilder.createId(), text, }) {
        const content = { text };
        const payloadBundle = {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.TEXT,
        };
        return new TextContentBuilder_1.TextContentBuilder(payloadBundle);
    }
    createConfirmation({ conversationId, firstMessageId, messageId = MessageBuilder.createId(), moreMessageIds, type, }) {
        const content = { firstMessageId, moreMessageIds, type };
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.CONFIRMATION,
        };
    }
    createButtonActionMessage({ content, conversationId, messageId = MessageBuilder.createId(), }) {
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.BUTTON_ACTION,
        };
    }
    createButtonActionConfirmationMessage({ content, conversationId, messageId = MessageBuilder.createId(), }) {
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.BUTTON_ACTION_CONFIRMATION,
        };
    }
    createComposite({ conversationId, messageId = MessageBuilder.createId() }) {
        const content = {};
        const payloadBundle = {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.COMPOSITE,
        };
        return new CompositeContentBuilder_1.CompositeContentBuilder(payloadBundle);
    }
    createPing({ conversationId, messageId = MessageBuilder.createId(), ping = {
        hotKnock: false,
    }, }) {
        return {
            content: ping,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.PING,
        };
    }
    createSessionReset({ conversationId, messageId = MessageBuilder.createId() }) {
        const content = {
            clientAction: protocol_messaging_1.ClientAction.RESET_SESSION,
        };
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.CLIENT_ACTION,
        };
    }
    async createLinkPreview(linkPreview) {
        const linkPreviewUploaded = Object.assign({}, linkPreview);
        const linkPreviewImage = linkPreview.image;
        if (linkPreviewImage) {
            const imageAsset = await this.assetService.uploadImageAsset(linkPreviewImage);
            delete linkPreviewUploaded.image;
            linkPreviewUploaded.imageUploaded = {
                asset: imageAsset,
                image: linkPreviewImage,
            };
        }
        return linkPreviewUploaded;
    }
    static createId() {
        return uuidjs_1.default.genV4().toString();
    }
    getSelfUserId() {
        return this.apiClient.context.userId;
    }
}
exports.MessageBuilder = MessageBuilder;
//# sourceMappingURL=MessageBuilder.js.map