import type { APIClient } from '@wireapp/api-client';
import type { CipherOptions } from '@wireapp/api-client/src/asset';
import { Confirmation } from '@wireapp/protocol-messaging';
import { AbortReason } from '..';
import type { AssetService } from '../AssetService';
import type { ButtonActionConfirmationContent, ButtonActionContent, CallingContent, FileContent, FileMetaDataContent, ImageContent, KnockContent, LegalHoldStatus, LinkPreviewContent, LinkPreviewUploadedContent, LocationContent, ReactionContent } from '../content';
import { CompositeContentBuilder } from './CompositeContentBuilder';
import type { ButtonActionConfirmationMessage, ButtonActionMessage, CallMessage, ConfirmationMessage, FileAssetAbortMessage, FileAssetMessage, FileAssetMetaDataMessage, ImageAssetMessageOutgoing, LocationMessage, PingMessage, ReactionMessage, ResetSessionMessage } from './OtrMessage';
import { TextContentBuilder } from './TextContentBuilder';
interface BaseOptions {
    conversationId: string;
    messageId?: string;
}
interface CreateImageOptions extends BaseOptions {
    cipherOptions?: CipherOptions;
    expectsReadConfirmation?: boolean;
    image: ImageContent;
    legalHoldStatus?: LegalHoldStatus;
}
interface CreateFileOptions {
    cipherOptions?: CipherOptions;
    conversationId: string;
    expectsReadConfirmation?: boolean;
    file: FileContent;
    legalHoldStatus?: LegalHoldStatus;
    originalMessageId: string;
}
interface CreateEditedTextOptions extends BaseOptions {
    newMessageText: string;
    originalMessageId: string;
}
interface CreateFileMetadataOptions extends BaseOptions {
    expectsReadConfirmation?: boolean;
    legalHoldStatus?: LegalHoldStatus;
    metaData: FileMetaDataContent;
}
interface CreateFileAbortOptions {
    conversationId: string;
    expectsReadConfirmation?: boolean;
    legalHoldStatus?: LegalHoldStatus;
    originalMessageId: string;
    reason: AbortReason;
}
interface CreateLocationOptions extends BaseOptions {
    location: LocationContent;
}
interface CreateCallOptions extends BaseOptions {
    content: CallingContent;
}
interface CreateReactionOptions extends BaseOptions {
    reaction: ReactionContent;
}
interface CreateTextOptions extends BaseOptions {
    text: string;
}
interface CreateConfirmationOptions extends BaseOptions {
    firstMessageId: string;
    moreMessageIds?: string[];
    type: Confirmation.Type;
}
interface CreatePingOptions extends BaseOptions {
    ping?: KnockContent;
}
interface CreateButtonActionConfirmationOptions extends BaseOptions {
    content: ButtonActionConfirmationContent;
}
interface CreateActionMessageOptions extends BaseOptions {
    content: ButtonActionContent;
}
export declare class MessageBuilder {
    private readonly apiClient;
    private readonly assetService;
    constructor(apiClient: APIClient, assetService: AssetService);
    createEditedText({ conversationId, messageId, newMessageText, originalMessageId, }: CreateEditedTextOptions): TextContentBuilder;
    createFileData({ conversationId, cipherOptions, expectsReadConfirmation, file, legalHoldStatus, originalMessageId, }: CreateFileOptions): Promise<FileAssetMessage>;
    createFileMetadata({ conversationId, expectsReadConfirmation, legalHoldStatus, messageId, metaData, }: CreateFileMetadataOptions): FileAssetMetaDataMessage;
    createFileAbort({ conversationId, expectsReadConfirmation, legalHoldStatus, originalMessageId, reason, }: CreateFileAbortOptions): Promise<FileAssetAbortMessage>;
    createImage({ conversationId, cipherOptions, expectsReadConfirmation, image, legalHoldStatus, messageId, }: CreateImageOptions): Promise<ImageAssetMessageOutgoing>;
    createLocation({ conversationId, location, messageId, }: CreateLocationOptions): LocationMessage;
    createCall({ content, conversationId, messageId }: CreateCallOptions): CallMessage;
    createReaction({ conversationId, messageId, reaction, }: CreateReactionOptions): ReactionMessage;
    createText({ conversationId, messageId, text, }: CreateTextOptions): TextContentBuilder;
    createConfirmation({ conversationId, firstMessageId, messageId, moreMessageIds, type, }: CreateConfirmationOptions): ConfirmationMessage;
    createButtonActionMessage({ content, conversationId, messageId, }: CreateActionMessageOptions): ButtonActionMessage;
    createButtonActionConfirmationMessage({ content, conversationId, messageId, }: CreateButtonActionConfirmationOptions): ButtonActionConfirmationMessage;
    createComposite({ conversationId, messageId }: BaseOptions): CompositeContentBuilder;
    createPing({ conversationId, messageId, ping, }: CreatePingOptions): PingMessage;
    createSessionReset({ conversationId, messageId }: BaseOptions): ResetSessionMessage;
    createLinkPreview(linkPreview: LinkPreviewContent): Promise<LinkPreviewUploadedContent>;
    static createId(): string;
    private getSelfUserId;
}
export {};
