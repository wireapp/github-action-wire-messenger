"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const api_client_1 = require("@wireapp/api-client");
const store_engine_1 = require("@wireapp/store-engine");
const conversation_1 = require("../conversation");
const NotificationService_1 = require("./NotificationService");
const BASE_URL = 'mock-backend.wire.com';
const MOCK_BACKEND = {
    name: 'mock',
    rest: `https://${BASE_URL}`,
    ws: `wss://${BASE_URL}`,
};
describe('NotificationService', () => {
    describe('handleEvent', () => {
        it('propagates errors to the outer calling function', async (done) => {
            const storeEngine = new store_engine_1.MemoryEngine();
            await storeEngine.init('NotificationService.test');
            const apiClient = new api_client_1.APIClient({ urls: MOCK_BACKEND });
            const cryptographyService = {};
            const notificationService = new NotificationService_1.NotificationService(apiClient, cryptographyService, storeEngine);
            spyOn(notificationService, 'handleEvent').and.throwError('Test error');
            notificationService.on(NotificationService_1.NotificationService.TOPIC.NOTIFICATION_ERROR, notificationError => {
                expect(notificationError.error.message).toBe('Test error');
                done();
            });
            const notification = {
                payload: [{}],
            };
            await notificationService.handleNotification(notification, conversation_1.PayloadBundleSource.NOTIFICATION_STREAM);
        });
    });
    describe('handleNotification', () => {
        it('updates last notification ID when notification is NOT transient', async () => {
            const storeEngine = new store_engine_1.MemoryEngine();
            await storeEngine.init('NotificationService.test');
            const apiClient = new api_client_1.APIClient({ urls: MOCK_BACKEND });
            const notificationService = new NotificationService_1.NotificationService(apiClient, {}, storeEngine);
            spyOn(notificationService, 'handleEvent').and.returnValue({});
            const spySetLastNotificationId = spyOn(notificationService, 'setLastNotificationId').and.returnValue({});
            const notification = {
                payload: [{}],
                transient: false,
            };
            await notificationService.handleNotification(notification, conversation_1.PayloadBundleSource.NOTIFICATION_STREAM);
            expect(spySetLastNotificationId.calls.count()).toBe(1);
        });
        it('does NOT update last notification ID when notification is transient', async () => {
            const storeEngine = new store_engine_1.MemoryEngine();
            await storeEngine.init('NotificationService.test');
            const apiClient = new api_client_1.APIClient({ urls: MOCK_BACKEND });
            const notificationService = new NotificationService_1.NotificationService(apiClient, {}, storeEngine);
            spyOn(notificationService, 'handleEvent').and.returnValue({});
            const spySetLastNotificationId = spyOn(notificationService, 'setLastNotificationId').and.returnValue({});
            const notification = {
                payload: [{}],
                transient: true,
            };
            await notificationService.handleNotification(notification, conversation_1.PayloadBundleSource.NOTIFICATION_STREAM);
            expect(spySetLastNotificationId.calls.count()).toBe(0);
        });
        it('does NOT update last notification ID when event processing fails', async (done) => {
            const storeEngine = new store_engine_1.MemoryEngine();
            await storeEngine.init('NotificationService.test');
            const apiClient = new api_client_1.APIClient({ urls: MOCK_BACKEND });
            const notificationService = new NotificationService_1.NotificationService(apiClient, {}, storeEngine);
            notificationService.on(NotificationService_1.NotificationService.TOPIC.NOTIFICATION_ERROR, notificationError => {
                expect(notificationError.error.message).toBe('Test error');
                expect(spySetLastNotificationId.calls.count()).toBe(0);
                done();
            });
            spyOn(notificationService, 'handleEvent').and.throwError('Test error');
            const spySetLastNotificationId = spyOn(notificationService, 'setLastNotificationId').and.returnValue({});
            const notification = {
                payload: [{}],
                transient: true,
            };
            await notificationService.handleNotification(notification, conversation_1.PayloadBundleSource.NOTIFICATION_STREAM);
        });
    });
});
//# sourceMappingURL=NotificationService.test.node.js.map