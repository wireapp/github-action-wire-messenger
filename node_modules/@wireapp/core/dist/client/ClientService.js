"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientService = void 0;
const client_1 = require("@wireapp/api-client/dist/client/");
const ClientBackendRepository_1 = require("./ClientBackendRepository");
const ClientDatabaseRepository_1 = require("./ClientDatabaseRepository");
class ClientService {
    constructor(apiClient, storeEngine, cryptographyService) {
        this.apiClient = apiClient;
        this.storeEngine = storeEngine;
        this.cryptographyService = cryptographyService;
        this.database = new ClientDatabaseRepository_1.ClientDatabaseRepository(this.storeEngine);
        this.backend = new ClientBackendRepository_1.ClientBackendRepository(this.apiClient);
    }
    deleteLocalClient() {
        return this.database.deleteLocalClient();
    }
    getClients() {
        return this.backend.getClients();
    }
    getLocalClient() {
        return this.database.getLocalClient();
    }
    createLocalClient(client) {
        return this.database.createLocalClient(client);
    }
    synchronizeClients() {
        return __awaiter(this, void 0, void 0, function* () {
            const registeredClients = yield this.backend.getClients();
            const filteredClients = registeredClients.filter(client => client.id !== this.apiClient.context.clientId);
            return this.database.createClientList(this.apiClient.context.userId, filteredClients);
        });
    }
    // TODO: Split functionality into "create" and "register" client
    register(loginData, clientInfo = {
        classification: client_1.ClientClassification.DESKTOP,
        cookieLabel: 'default',
        model: '@wireapp/core',
    }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.apiClient.context) {
                throw new Error('Context is not set.');
            }
            if (loginData.clientType === client_1.ClientType.NONE) {
                throw new Error(`Can't register client of type "${client_1.ClientType.NONE}"`);
            }
            const serializedPreKeys = yield this.cryptographyService.createCryptobox();
            if (!this.cryptographyService.cryptobox.lastResortPreKey) {
                throw new Error('Cryptobox got initialized without a last resort PreKey.');
            }
            const newClient = {
                class: clientInfo.classification,
                cookie: clientInfo.cookieLabel,
                label: clientInfo.label,
                lastkey: this.cryptographyService.cryptobox.serialize_prekey(this.cryptographyService.cryptobox.lastResortPreKey),
                location: clientInfo.location,
                model: clientInfo.model,
                password: loginData.password ? String(loginData.password) : undefined,
                prekeys: serializedPreKeys,
                type: loginData.clientType,
            };
            const client = yield this.backend.postClient(newClient);
            yield this.createLocalClient(client);
            yield this.cryptographyService.initCryptobox();
            return client;
        });
    }
}
exports.ClientService = ClientService;
//# sourceMappingURL=ClientService.js.map