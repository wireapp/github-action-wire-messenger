import { APIClient } from '@wireapp/api-client';
import { LoginData } from '@wireapp/api-client/dist/auth/';
import { RegisteredClient } from '@wireapp/api-client/dist/client/';
import { CRUDEngine } from '@wireapp/store-engine';
import { CryptographyService } from '../cryptography/';
import { ClientInfo } from './';
export interface MetaClient extends RegisteredClient {
    meta: {
        is_verified?: boolean;
        primary_key: string;
    };
}
export declare class ClientService {
    private readonly apiClient;
    private readonly storeEngine;
    private readonly cryptographyService;
    private readonly database;
    private readonly backend;
    constructor(apiClient: APIClient, storeEngine: CRUDEngine, cryptographyService: CryptographyService);
    deleteLocalClient(): Promise<string>;
    getClients(): Promise<RegisteredClient[]>;
    getLocalClient(): Promise<MetaClient>;
    createLocalClient(client: RegisteredClient): Promise<MetaClient>;
    synchronizeClients(): Promise<MetaClient[]>;
    register(loginData: LoginData, clientInfo?: ClientInfo): Promise<RegisteredClient>;
}
