"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptAsset = exports.decryptAsset = void 0;
const { crypto } = window;
const isEqual = (a, b) => {
    const arrayA = new Uint32Array(a);
    const arrayB = new Uint32Array(b);
    const hasSameLength = arrayA.length === arrayB.length;
    const hasSameValues = arrayA.every((value, index) => value === arrayB[index]);
    return hasSameLength && hasSameValues;
};
exports.decryptAsset = ({ cipherText, keyBytes, sha256: referenceSha256, }) => __awaiter(void 0, void 0, void 0, function* () {
    const computedSha256 = yield crypto.subtle.digest('SHA-256', cipherText);
    if (!isEqual(Buffer.from(computedSha256), referenceSha256)) {
        throw new Error('Encrypted asset does not match its SHA-256 hash');
    }
    const key = yield crypto.subtle.importKey('raw', keyBytes, 'AES-CBC', false, ['decrypt']);
    const initializationVector = cipherText.slice(0, 16);
    const assetCipherText = cipherText.slice(16);
    const decipher = yield crypto.subtle.decrypt({ iv: initializationVector, name: 'AES-CBC' }, key, assetCipherText);
    return Buffer.from(decipher);
});
exports.encryptAsset = (plaintext) => __awaiter(void 0, void 0, void 0, function* () {
    const initializationVector = crypto.getRandomValues(new Uint8Array(16));
    const rawKeyBytes = crypto.getRandomValues(new Uint8Array(32));
    const key = yield crypto.subtle.importKey('raw', rawKeyBytes.buffer, 'AES-CBC', true, ['encrypt']);
    const cipherText = yield crypto.subtle.encrypt({ iv: initializationVector.buffer, name: 'AES-CBC' }, key, plaintext);
    const ivCipherText = new Uint8Array(cipherText.byteLength + initializationVector.byteLength);
    ivCipherText.set(initializationVector, 0);
    ivCipherText.set(new Uint8Array(cipherText), initializationVector.byteLength);
    const computedSha256 = yield crypto.subtle.digest('SHA-256', ivCipherText);
    const keyBytes = yield crypto.subtle.exportKey('raw', key);
    return {
        cipherText: Buffer.from(ivCipherText.buffer),
        keyBytes: Buffer.from(keyBytes),
        sha256: Buffer.from(computedSha256),
    };
});
//# sourceMappingURL=AssetCryptography.browser.js.map