"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptAsset = exports.decryptAsset = void 0;
const crypto = __importStar(require("crypto"));
const isEqual = (a, b) => {
    const arrayA = new Uint32Array(a);
    const arrayB = new Uint32Array(b);
    const hasSameLength = arrayA.length === arrayB.length;
    const hasSameValues = arrayA.every((value, index) => value === arrayB[index]);
    return hasSameLength && hasSameValues;
};
exports.decryptAsset = ({ cipherText, keyBytes, sha256: referenceSha256, }) => __awaiter(void 0, void 0, void 0, function* () {
    const computedSha256 = crypto.createHash('SHA256').update(cipherText).digest();
    if (!isEqual(computedSha256, referenceSha256)) {
        throw new Error('Encrypted asset does not match its SHA-256 hash');
    }
    const initializationVector = cipherText.slice(0, 16);
    const assetCipherText = cipherText.slice(16);
    const decipher = crypto.createDecipheriv('AES-256-CBC', keyBytes, initializationVector);
    const decipherUpdated = decipher.update(assetCipherText);
    const decipherFinal = decipher.final();
    return Buffer.concat([decipherUpdated, decipherFinal]);
});
exports.encryptAsset = (plainText) => __awaiter(void 0, void 0, void 0, function* () {
    const initializationVector = crypto.randomBytes(16);
    const keyBytes = crypto.randomBytes(32);
    const cipher = crypto.createCipheriv('AES-256-CBC', keyBytes, initializationVector);
    const cipherUpdated = cipher.update(plainText);
    const cipherFinal = cipher.final();
    const cipherText = Buffer.concat([cipherUpdated, cipherFinal]);
    const ivCipherText = new Uint8Array(initializationVector.byteLength + cipherText.byteLength);
    ivCipherText.set(initializationVector, 0);
    ivCipherText.set(cipherText, initializationVector.byteLength);
    const computedSha256 = crypto.createHash('SHA256').update(Buffer.from(ivCipherText.buffer)).digest();
    return {
        cipherText: Buffer.from(ivCipherText.buffer),
        keyBytes,
        sha256: computedSha256,
    };
});
//# sourceMappingURL=AssetCryptography.node.js.map