"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserService = void 0;
const protocol_messaging_1 = require("@wireapp/protocol-messaging");
const uuidjs_1 = __importDefault(require("uuidjs"));
class UserService {
    constructor(apiClient, broadcastService) {
        this.apiClient = apiClient;
        this.broadcastService = broadcastService;
    }
    getUser(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const users = yield this.getUsers([userId]);
            return users[0];
        });
    }
    getUsers(userIds) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiClient.user.api.getUsers({ ids: userIds });
        });
    }
    setAvailability(teamId, type) {
        const genericMessage = protocol_messaging_1.GenericMessage.create({
            availability: new protocol_messaging_1.Availability({ type }),
            messageId: uuidjs_1.default.genV4().toString(),
        });
        return this.broadcastService.broadcastGenericMessage(teamId, genericMessage);
    }
}
exports.UserService = UserService;
//# sourceMappingURL=UserService.js.map