"use strict";
/*
 * Wire
 * Copyright (C) 2019 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageBuilder = void 0;
const protocol_messaging_1 = require("@wireapp/protocol-messaging");
const uuidjs_1 = __importDefault(require("uuidjs"));
const __1 = require("..");
const CompositeContentBuilder_1 = require("./CompositeContentBuilder");
const TextContentBuilder_1 = require("./TextContentBuilder");
class MessageBuilder {
    constructor(apiClient, assetService) {
        this.apiClient = apiClient;
        this.assetService = assetService;
    }
    createEditedText(conversationId, newMessageText, originalMessageId, messageId = MessageBuilder.createId()) {
        const content = {
            originalMessageId,
            text: newMessageText,
        };
        const payloadBundle = {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.MESSAGE_EDIT,
        };
        return new TextContentBuilder_1.TextContentBuilder(payloadBundle);
    }
    createFileData(conversationId, file, originalMessageId, expectsReadConfirmation, legalHoldStatus) {
        return __awaiter(this, void 0, void 0, function* () {
            const imageAsset = yield this.assetService.uploadFileAsset(file);
            const content = {
                asset: imageAsset,
                expectsReadConfirmation,
                file,
                legalHoldStatus,
            };
            return {
                content,
                conversation: conversationId,
                from: this.getSelfUserId(),
                id: originalMessageId,
                source: __1.PayloadBundleSource.LOCAL,
                state: __1.PayloadBundleState.OUTGOING_UNSENT,
                timestamp: Date.now(),
                type: __1.PayloadBundleType.ASSET,
            };
        });
    }
    createFileMetadata(conversationId, metaData, messageId = MessageBuilder.createId(), expectsReadConfirmation, legalHoldStatus) {
        const content = {
            expectsReadConfirmation,
            legalHoldStatus,
            metaData,
        };
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.ASSET_META,
        };
    }
    createFileAbort(conversationId, reason, originalMessageId, expectsReadConfirmation, legalHoldStatus) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = {
                expectsReadConfirmation,
                legalHoldStatus,
                reason,
            };
            return {
                content,
                conversation: conversationId,
                from: this.getSelfUserId(),
                id: originalMessageId,
                source: __1.PayloadBundleSource.LOCAL,
                state: __1.PayloadBundleState.OUTGOING_UNSENT,
                timestamp: Date.now(),
                type: __1.PayloadBundleType.ASSET_ABORT,
            };
        });
    }
    createImage(conversationId, image, messageId = MessageBuilder.createId(), expectsReadConfirmation, legalHoldStatus) {
        return __awaiter(this, void 0, void 0, function* () {
            const imageAsset = yield this.assetService.uploadImageAsset(image);
            const content = {
                asset: imageAsset,
                expectsReadConfirmation,
                image,
                legalHoldStatus,
            };
            return {
                content,
                conversation: conversationId,
                from: this.getSelfUserId(),
                id: messageId,
                source: __1.PayloadBundleSource.LOCAL,
                state: __1.PayloadBundleState.OUTGOING_UNSENT,
                timestamp: Date.now(),
                type: __1.PayloadBundleType.ASSET_IMAGE,
            };
        });
    }
    createLocation(conversationId, location, messageId = MessageBuilder.createId()) {
        return {
            content: location,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.LOCATION,
        };
    }
    createCall(conversationId, content, messageId = MessageBuilder.createId()) {
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.CALL,
        };
    }
    createReaction(conversationId, reaction, messageId = MessageBuilder.createId()) {
        return {
            content: reaction,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.REACTION,
        };
    }
    createText(conversationId, text, messageId = MessageBuilder.createId()) {
        const content = { text };
        const payloadBundle = {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.TEXT,
        };
        return new TextContentBuilder_1.TextContentBuilder(payloadBundle);
    }
    createConfirmation(conversationId, firstMessageId, type, messageId = MessageBuilder.createId(), moreMessageIds) {
        const content = { firstMessageId, moreMessageIds, type };
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.CONFIRMATION,
        };
    }
    createButtonActionMessage(conversationId, content, messageId = MessageBuilder.createId()) {
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.BUTTON_ACTION,
        };
    }
    createButtonActionConfirmationMessage(conversationId, content, messageId = MessageBuilder.createId()) {
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.BUTTON_ACTION_CONFIRMATION,
        };
    }
    createComposite(conversationId, messageId = MessageBuilder.createId()) {
        const content = {};
        const payloadBundle = {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.COMPOSITE,
        };
        return new CompositeContentBuilder_1.CompositeContentBuilder(payloadBundle);
    }
    createPing(conversationId, ping = {
        hotKnock: false,
    }, messageId = MessageBuilder.createId()) {
        return {
            content: ping,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.PING,
        };
    }
    createSessionReset(conversationId, messageId = MessageBuilder.createId()) {
        const content = {
            clientAction: protocol_messaging_1.ClientAction.RESET_SESSION,
        };
        return {
            content,
            conversation: conversationId,
            from: this.getSelfUserId(),
            id: messageId,
            source: __1.PayloadBundleSource.LOCAL,
            state: __1.PayloadBundleState.OUTGOING_UNSENT,
            timestamp: Date.now(),
            type: __1.PayloadBundleType.CLIENT_ACTION,
        };
    }
    createLinkPreview(linkPreview) {
        return __awaiter(this, void 0, void 0, function* () {
            const linkPreviewUploaded = Object.assign({}, linkPreview);
            const linkPreviewImage = linkPreview.image;
            if (linkPreviewImage) {
                const imageAsset = yield this.assetService.uploadImageAsset(linkPreviewImage);
                delete linkPreviewUploaded.image;
                linkPreviewUploaded.imageUploaded = {
                    asset: imageAsset,
                    image: linkPreviewImage,
                };
            }
            return linkPreviewUploaded;
        });
    }
    static createId() {
        return uuidjs_1.default.genV4().toString();
    }
    getSelfUserId() {
        return this.apiClient.context.userId;
    }
}
exports.MessageBuilder = MessageBuilder;
//# sourceMappingURL=MessageBuilder.js.map