import { APIClient } from '@wireapp/api-client';
import { Confirmation } from '@wireapp/protocol-messaging';
import { AbortReason } from '..';
import { AssetService } from '../AssetService';
import { ButtonActionConfirmationContent, ButtonActionContent, CallingContent, FileContent, FileMetaDataContent, ImageContent, KnockContent, LegalHoldStatus, LinkPreviewContent, LinkPreviewUploadedContent, LocationContent, ReactionContent } from '../content';
import { CompositeContentBuilder } from './CompositeContentBuilder';
import { ButtonActionConfirmationMessage, ButtonActionMessage, CallMessage, ConfirmationMessage, FileAssetAbortMessage, FileAssetMessage, FileAssetMetaDataMessage, ImageAssetMessageOutgoing, LocationMessage, PingMessage, ReactionMessage, ResetSessionMessage } from './OtrMessage';
import { TextContentBuilder } from './TextContentBuilder';
export declare class MessageBuilder {
    private readonly apiClient;
    private readonly assetService;
    constructor(apiClient: APIClient, assetService: AssetService);
    createEditedText(conversationId: string, newMessageText: string, originalMessageId: string, messageId?: string): TextContentBuilder;
    createFileData(conversationId: string, file: FileContent, originalMessageId: string, expectsReadConfirmation?: boolean, legalHoldStatus?: LegalHoldStatus): Promise<FileAssetMessage>;
    createFileMetadata(conversationId: string, metaData: FileMetaDataContent, messageId?: string, expectsReadConfirmation?: boolean, legalHoldStatus?: LegalHoldStatus): FileAssetMetaDataMessage;
    createFileAbort(conversationId: string, reason: AbortReason, originalMessageId: string, expectsReadConfirmation?: boolean, legalHoldStatus?: LegalHoldStatus): Promise<FileAssetAbortMessage>;
    createImage(conversationId: string, image: ImageContent, messageId?: string, expectsReadConfirmation?: boolean, legalHoldStatus?: LegalHoldStatus): Promise<ImageAssetMessageOutgoing>;
    createLocation(conversationId: string, location: LocationContent, messageId?: string): LocationMessage;
    createCall(conversationId: string, content: CallingContent, messageId?: string): CallMessage;
    createReaction(conversationId: string, reaction: ReactionContent, messageId?: string): ReactionMessage;
    createText(conversationId: string, text: string, messageId?: string): TextContentBuilder;
    createConfirmation(conversationId: string, firstMessageId: string, type: Confirmation.Type, messageId?: string, moreMessageIds?: string[]): ConfirmationMessage;
    createButtonActionMessage(conversationId: string, content: ButtonActionContent, messageId?: string): ButtonActionMessage;
    createButtonActionConfirmationMessage(conversationId: string, content: ButtonActionConfirmationContent, messageId?: string): ButtonActionConfirmationMessage;
    createComposite(conversationId: string, messageId?: string): CompositeContentBuilder;
    createPing(conversationId: string, ping?: KnockContent, messageId?: string): PingMessage;
    createSessionReset(conversationId: string, messageId?: string): ResetSessionMessage;
    createLinkPreview(linkPreview: LinkPreviewContent): Promise<LinkPreviewUploadedContent>;
    static createId(): string;
    private getSelfUserId;
}
