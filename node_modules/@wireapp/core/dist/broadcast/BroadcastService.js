"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BroadcastService = void 0;
const protocol_messaging_1 = require("@wireapp/protocol-messaging");
class BroadcastService {
    constructor(apiClient, conversationService, cryptographyService) {
        this.apiClient = apiClient;
        this.conversationService = conversationService;
        this.cryptographyService = cryptographyService;
    }
    getPreKeyBundle(teamId, skipOwnClients = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const { members: teamMembers } = yield this.apiClient.teams.member.api.getAllMembers(teamId);
            let members = teamMembers.map(member => ({ id: member.user }));
            if (skipOwnClients) {
                const selfUser = yield this.apiClient.self.api.getSelf();
                members = members.filter(member => member.id !== selfUser.id);
            }
            const preKeys = yield Promise.all(members.map(member => this.apiClient.user.api.getUserPreKeys(member.id)));
            return preKeys.reduce((bundleMap, bundle) => {
                bundleMap[bundle.user] = {};
                for (const client of bundle.clients) {
                    bundleMap[bundle.user][client.client] = client.prekey;
                }
                return bundleMap;
            }, {});
        });
    }
    broadcastGenericMessage(teamId, genericMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            const plainTextArray = protocol_messaging_1.GenericMessage.encode(genericMessage).finish();
            const preKeyBundle = yield this.getPreKeyBundle(teamId);
            const recipients = yield this.cryptographyService.encrypt(plainTextArray, preKeyBundle);
            return this.sendOTRBroadcastMessage(this.apiClient.validatedClientId, recipients, plainTextArray);
        });
    }
    sendOTRBroadcastMessage(sendingClientId, recipients, plainTextArray, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const message = {
                data,
                recipients,
                sender: sendingClientId,
            };
            try {
                yield this.apiClient.broadcast.api.postBroadcastMessage(sendingClientId, message);
            }
            catch (error) {
                const reEncryptedMessage = yield this.conversationService.onClientMismatch(error, message, plainTextArray);
                yield this.apiClient.broadcast.api.postBroadcastMessage(sendingClientId, reEncryptedMessage);
            }
        });
    }
}
exports.BroadcastService = BroadcastService;
//# sourceMappingURL=BroadcastService.js.map