/// <reference types="node" />
import { EventEmitter } from 'events';
import { AccessTokenData, AuthAPI, Context, Cookie, InvalidTokenError, LoginData, RegisterData } from './auth/';
import { AccountAPI } from './account/AccountAPI';
import { AssetAPI } from './asset/';
import { BroadcastAPI } from './broadcast/';
import { ClientAPI, ClientType } from './client/';
import { ConnectionAPI } from './connection/';
import { ConversationAPI } from './conversation/';
import { GiphyAPI } from './giphy/';
import { HttpClient } from './http/';
import { NotificationAPI } from './notification/';
import { OnConnect, WebSocketClient } from './tcp/';
import { SelfAPI } from './self/';
import { ServiceProviderAPI } from './serviceProvider';
import { ServicesAPI } from './services';
import { FeatureAPI, IdentityProviderAPI, LegalHoldAPI, MemberAPI, PaymentAPI, BillingAPI, ServiceAPI, TeamAPI, TeamConversationAPI, TeamInvitationAPI } from './team/';
import { UserAPI } from './user/';
import type { Config } from './Config';
import { TeamSearchAPI } from './team/search';
import { ScimAPI } from './team/scim/ScimAPI';
declare enum TOPIC {
    ACCESS_TOKEN_REFRESH = "APIClient.TOPIC.ACCESS_TOKEN_REFRESH",
    COOKIE_REFRESH = "APIClient.TOPIC.COOKIE_REFRESH",
    /** Event being sent when logout is done. */
    ON_LOGOUT = "APIClient.TOPIC.ON_LOGOUT"
}
export interface APIClient {
    on(event: TOPIC.ON_LOGOUT, listener: (error: InvalidTokenError) => void): this;
    on(event: TOPIC.COOKIE_REFRESH, listener: (cookie?: Cookie) => void): this;
    on(event: TOPIC.ACCESS_TOKEN_REFRESH, listener: (accessToken: AccessTokenData) => void): this;
}
export declare class APIClient extends EventEmitter {
    private readonly logger;
    account: {
        api: AccountAPI;
    };
    asset: {
        api: AssetAPI;
    };
    auth: {
        api: AuthAPI;
    };
    broadcast: {
        api: BroadcastAPI;
    };
    client: {
        api: ClientAPI;
    };
    connection: {
        api: ConnectionAPI;
    };
    conversation: {
        api: ConversationAPI;
    };
    giphy: {
        api: GiphyAPI;
    };
    notification: {
        api: NotificationAPI;
    };
    self: {
        api: SelfAPI;
    };
    services: {
        api: ServicesAPI;
    };
    serviceProvider: {
        api: ServiceProviderAPI;
    };
    teams: {
        conversation: {
            api: TeamConversationAPI;
        };
        feature: {
            api: FeatureAPI;
        };
        identityProvider: {
            api: IdentityProviderAPI;
        };
        invitation: {
            api: TeamInvitationAPI;
        };
        legalhold: {
            api: LegalHoldAPI;
        };
        member: {
            api: MemberAPI;
        };
        payment: {
            api: PaymentAPI;
        };
        billing: {
            api: BillingAPI;
        };
        scim: {
            api: ScimAPI;
        };
        search: {
            api: TeamSearchAPI;
        };
        service: {
            api: ServiceAPI;
        };
        team: {
            api: TeamAPI;
        };
    };
    user: {
        api: UserAPI;
    };
    private readonly accessTokenStore;
    context?: Context;
    transport: {
        http: HttpClient;
        ws: WebSocketClient;
    };
    config: Config;
    static BACKEND: {
        PRODUCTION: import("./env/Backend").BackendData;
        STAGING: import("./env/Backend").BackendData;
    };
    static readonly TOPIC: typeof TOPIC;
    static VERSION: string;
    constructor(config?: Config);
    init(clientType?: ClientType, cookie?: Cookie): Promise<Context>;
    login(loginData: LoginData): Promise<Context>;
    loginWithToken(accessTokenString: string, clientType?: ClientType): Promise<Context>;
    register(userAccount: RegisterData, clientType?: ClientType): Promise<Context>;
    logout(options?: {
        skipLogoutRequest: boolean;
    }): Promise<void>;
    connect(onConnect?: OnConnect): Promise<WebSocketClient>;
    private createContext;
    disconnect(reason?: string): void;
    get clientId(): string | undefined;
    get userId(): string | undefined;
    get domain(): string | undefined;
    /** Should be used in cases where the user ID is MANDATORY. */
    get validatedUserId(): string;
    /** Should be used in cases where the client ID is MANDATORY. */
    get validatedClientId(): string;
}
export {};
