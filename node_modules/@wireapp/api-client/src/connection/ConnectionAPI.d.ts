import type { Connection, ConnectionRequest, ConnectionUpdate, UserConnectionList } from '../connection/';
import { HttpClient } from '../http/';
export declare class ConnectionAPI {
    private readonly client;
    constructor(client: HttpClient);
    static readonly URL: {
        CONNECTIONS: string;
    };
    /**
     * Get an existing connection to another user.
     * @param userId The ID of the other user
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/connection
     */
    getConnection(userId: string): Promise<Connection>;
    /**
     * List the connections to other users.
     * @param limit Number of results to return (default 100, max 500)
     * @param connectionId The connection ID to start from
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/connections
     */
    getConnections(connectionId?: string, limit?: number): Promise<UserConnectionList>;
    /**
     * Get all connections to other users.
     */
    getAllConnections(): Promise<Connection[]>;
    /**
     * Create a connection to another user.
     * Note: You can have no more than 1000 connections in accepted or sent state.
     * @param connectionRequestData: The connection request
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/createConnection
     */
    postConnection(connectionRequestData: ConnectionRequest): Promise<Connection>;
    /**
     * Update a connection.
     * Note: You can have no more than 1000 connections in accepted or sent state.
     * @param userId The ID of the other user
     * @param updatedConnection: The updated connection
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/updateConnection
     */
    putConnection(userId: string, updatedConnection: ConnectionUpdate): Promise<Connection>;
}
