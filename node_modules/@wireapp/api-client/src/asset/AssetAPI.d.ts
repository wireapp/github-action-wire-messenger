/// <reference types="node" />
import { AssetRetentionPolicy } from './AssetRetentionPolicy';
import { HttpClient, ProgressCallback, RequestCancelable } from '../http/';
import type { AssetUploadData } from './AssetUploadData';
export interface CipherOptions {
    /** Set a custom algorithm for encryption */
    algorithm?: string;
    /** Set a custom hash for encryption */
    hash?: Buffer;
}
export interface AssetOptions extends CipherOptions {
    public?: boolean;
    retention?: AssetRetentionPolicy;
}
export interface AssetResponse {
    buffer: ArrayBuffer;
    mimeType: string;
}
export declare class AssetAPI {
    private readonly client;
    private static readonly ASSET_V3_URL;
    private static readonly ASSET_SERVICE_URL;
    private static readonly ASSET_V2_URL;
    private static readonly ASSET_V2_CONVERSATION_URL;
    private static readonly ASSET_V1_URL;
    constructor(client: HttpClient);
    private getAssetShared;
    private postAssetShared;
    getAssetV1(assetId: string, conversationId: string, forceCaching?: boolean, progressCallback?: ProgressCallback): Promise<RequestCancelable<AssetResponse>>;
    getAssetV2(assetId: string, conversationId: string, forceCaching?: boolean, progressCallback?: ProgressCallback): Promise<RequestCancelable<AssetResponse>>;
    getAssetV3(assetId: string, token?: string | null, forceCaching?: boolean, progressCallback?: ProgressCallback): Promise<RequestCancelable<AssetResponse>>;
    getServiceAsset(assetId: string, token?: string | null, forceCaching?: boolean, progressCallback?: ProgressCallback): Promise<RequestCancelable<AssetResponse>>;
    postAsset(asset: Uint8Array, options?: AssetOptions, progressCallback?: ProgressCallback): Promise<RequestCancelable<AssetUploadData>>;
    postServiceAsset(asset: Uint8Array, options?: AssetOptions, progressCallback?: ProgressCallback): Promise<RequestCancelable<AssetUploadData>>;
}
