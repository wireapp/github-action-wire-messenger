"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriorityQueue = void 0;
const Item_1 = require("./Item");
const Priority_1 = require("./Priority");
class PriorityQueue {
    constructor(config) {
        this.config = {
            comparator: (a, b) => {
                if (a.priority === b.priority) {
                    return a.timestamp - b.timestamp;
                }
                return b.priority - a.priority;
            },
            maxRetries: 0,
            maxRetryDelay: Number.MAX_SAFE_INTEGER,
            retryDelay: 1000,
            retryGrowthFactor: 1.3,
        };
        this.isRunning = false;
        this.queue = [];
        this.config = Object.assign(Object.assign({}, this.config), config);
    }
    add(thunkedPromise, priority = Priority_1.Priority.MEDIUM, label) {
        return new Promise((resolve, reject) => {
            const item = new Item_1.Item();
            item.fn = thunkedPromise;
            item.label = label;
            item.priority = priority;
            item.reject = reject;
            item.resolve = resolve;
            item.retry = 0;
            item.timestamp = Date.now() + this.size;
            this.enqueue(item);
            if (!this.isRunning) {
                this.isRunning = true;
                void this.processList();
            }
        });
    }
    enqueue(item) {
        this.queue.push(item);
        this.queue.sort(this.config.comparator);
    }
    delete(label) {
        this.queue = this.queue.filter(item => item.label !== label);
    }
    deleteAll() {
        this.queue = [];
    }
    get all() {
        return this.queue;
    }
    get first() {
        return this.queue[0];
    }
    get last() {
        return this.queue[this.queue.length - 1];
    }
    get size() {
        return this.queue.length;
    }
    async processList() {
        const item = this.queue.shift();
        if (!item) {
            this.isRunning = false;
            return;
        }
        try {
            item.resolve(await item.fn());
            void this.processList();
        }
        catch (error) {
            if (item.retry >= this.config.maxRetries) {
                item.reject(error);
                void this.processList();
            }
            else {
                this.enqueue(item);
                setTimeout(() => this.processList(), this.getGrowingDelay(item.retry));
                item.retry++;
            }
        }
    }
    getGrowingDelay(currentRetry) {
        const delay = currentRetry < 1 ? this.config.retryDelay : this.config.retryDelay * currentRetry * this.config.retryGrowthFactor;
        return Math.min(delay, this.config.maxRetryDelay);
    }
    toString() {
        return this.queue
            .map((item, index) => {
            return `"${index}": ${item.toString()}`;
        })
            .join('\r\n');
    }
}
exports.PriorityQueue = PriorityQueue;
//# sourceMappingURL=PriorityQueue.js.map