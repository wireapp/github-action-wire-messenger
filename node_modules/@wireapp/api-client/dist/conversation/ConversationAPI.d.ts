import { ClientMismatch, Conversation, ConversationCode, ConversationIds, ConversationRolesList, Conversations, Invite, Member, NewConversation, NewOTRMessage } from './';
import { ConversationAccessUpdateEvent, ConversationCodeDeleteEvent, ConversationCodeUpdateEvent, ConversationEvent, ConversationMemberJoinEvent, ConversationMemberLeaveEvent, ConversationMessageTimerUpdateEvent, ConversationReceiptModeUpdateEvent, ConversationRenameEvent } from '../event/';
import { HttpClient } from '../http/';
import { ConversationAccessUpdateData, ConversationMemberUpdateData, ConversationMessageTimerUpdateData, ConversationNameUpdateData, ConversationOtherMemberUpdateData, ConversationReceiptModeUpdateData, ConversationTypingData } from './data';
export declare class ConversationAPI {
    private readonly client;
    static readonly MAX_CHUNK_SIZE = 500;
    static readonly URL: {
        ACCESS: string;
        BOTS: string;
        CLIENTS: string;
        CODE: string;
        CODE_CHECK: string;
        CONVERSATIONS: string;
        JOIN: string;
        MEMBERS: string;
        MESSAGES: string;
        MESSAGE_TIMER: string;
        NAME: string;
        OTR: string;
        RECEIPT_MODE: string;
        ROLES: string;
        SELF: string;
        TYPING: string;
    };
    constructor(client: HttpClient);
    /**
     * Delete a conversation code.
     * @param conversationId ID of conversation to delete the code for
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/deleteConversationCode
     */
    deleteConversationCode(conversationId: string): Promise<ConversationCodeDeleteEvent>;
    /**
     * Remove bot from conversation.
     * @param conversationId The conversation ID to remove the bot from
     * @param botId The ID of the bot to be removed from the conversation
     */
    deleteBot(conversationId: string, botId: string): Promise<void>;
    /**
     * Remove member from conversation.
     * @param conversationId The conversation ID to remove the user from
     * @param userId The user to remove
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/removeMember
     */
    deleteMember(conversationId: string, userId: string): Promise<ConversationMemberLeaveEvent>;
    /**
     * Get all conversations.
     */
    getAllConversations(): Promise<Conversation[]>;
    /**
     * Get a conversation code.
     * @param conversationId ID of conversation to get the code for
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/getConversationCode
     */
    getConversationCode(conversationId: string): Promise<ConversationCode>;
    /**
     * Get a conversation by ID.
     * @param conversationId The conversation ID
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/conversation
     */
    getConversation(conversationId: string): Promise<Conversation>;
    /**
     * Get all conversation IDs.
     * @param limit Max. number of IDs to return
     * @param conversationId Conversation ID to start from (exclusive)
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/conversationIds
     */
    getConversationIds(limit: number, conversationId?: string): Promise<ConversationIds>;
    /**
     * Get conversations as chunks.
     * Note: At most 500 conversations are returned per request.
     * @param startConversationId Conversation ID to start from (exclusive). Mutually exclusive with `conversationIds`.
     * @param limit Max. number of conversations to return
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/conversations
     */
    getConversations(startConversationId?: string, limit?: number): Promise<Conversations>;
    /**
     * Get conversations.
     * Note: At most 500 conversations are returned per request.
     * @param conversationId Conversation ID to start from (exclusive). Mutually exclusive with `conversationIds`.
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/conversations
     */
    getConversationsByIds(filteredConversationIds: string[]): Promise<Conversation[]>;
    /**
     * Get conversations.
     * Note: At most 500 conversations are returned per request.
     * @param startConversationId Conversation ID to start from (exclusive). Mutually exclusive with `conversationIds`.
     * @param filteredConversationIds Mutually exclusive with `startConversationId`. At most 32 IDs per request.
     * @param limit Max. number of conversations to return
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/conversations
     */
    private _getConversations;
    /**
     * Get existing roles available for the given conversation.
     * @param conversationId The Conversation ID to get roles for
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/getConversationsRoles
     */
    getRoles(conversationId: string): Promise<ConversationRolesList>;
    /**
     * Get self membership properties.
     * @param conversationId The Conversation ID to get properties for
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/getSelf
     */
    getMembershipProperties(conversationId: string): Promise<Member>;
    /**
     * Create a 1:1-conversation.
     * @param conversationData The new conversation
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/createOne2OneConversation
     */
    post1to1(conversationData: NewConversation): Promise<void>;
    /**
     * Add users to an existing conversation.
     * @param conversationId The conversation ID
     * @param invitationData The new conversation
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/addMembers
     */
    postAddMembers(conversationId: string, invitationData: Invite): Promise<ConversationEvent>;
    /**
     * Add a bot to an existing conversation.
     * @param conversationId ID of the conversation to add bots to
     * @param providerId ID of the bot provider
     * @param serviceId ID of the service provider
     */
    postBot(conversationId: string, providerId: string, serviceId: string): Promise<ConversationMemberJoinEvent>;
    /**
     * Create a new conversation
     * @param conversationData The new conversation
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/createGroupConversation
     */
    postConversation(conversationData: NewConversation): Promise<Conversation>;
    /**
     * Create or recreate a conversation code.
     * @param conversationId ID of conversation to request the code for
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/createConversationCode
     */
    postConversationCodeRequest(conversationId: string): Promise<ConversationCodeUpdateEvent>;
    /**
     * Validate a conversation code.
     * @param conversationCode The conversation code
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/checkConversationCode
     */
    postConversationCodeCheck(conversationCode: ConversationCode): Promise<void>;
    /**
     * Join a conversation by conversation code.
     * @param conversationCode The conversation code
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/joinConversationByCode
     */
    postJoinByCode(conversationCode: ConversationCode): Promise<ConversationMemberJoinEvent>;
    /**
     * Join a conversation.
     * @param conversationId The conversation ID
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/joinConversation
     */
    postJoin(conversationId: string): Promise<ConversationEvent>;
    /**
     * Post an encrypted message to a conversation.
     * @param clientId The sender's client ID
     * @param conversationId The conversation ID
     * @param messageData The message content
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/postOtrMessage
     */
    postOTRMessage(clientId: string, conversationId: string, messageData?: NewOTRMessage, params?: {
        ignore_missing?: boolean;
        report_missing?: string;
    }): Promise<ClientMismatch>;
    postForClients(clientId: string, conversationId: string): Promise<ClientMismatch>;
    /**
     * Create a self-conversation.
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/createSelfConversation
     */
    postSelf(): Promise<Conversation>;
    /**
     * Send typing notifications.
     * @param conversationId The Conversation ID to send notifications in
     * @param typingData The typing status
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/isTyping
     */
    postTyping(conversationId: string, typingData: ConversationTypingData): Promise<void>;
    /**
     * Update access modes for a conversation.
     * @param conversationId The conversation ID to update the access mode of
     * @param accessData The new access data
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateConversationAccess
     */
    putAccess(conversationId: string, accessData: ConversationAccessUpdateData): Promise<ConversationAccessUpdateEvent>;
    /**
     * Update conversation properties.
     * @param conversationId The conversation ID to update properties of
     * @param conversationNameData The new conversation name
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateConversation
     */
    putConversation(conversationId: string, conversationNameData: ConversationNameUpdateData): Promise<ConversationRenameEvent>;
    /**
     * Update the message timer for a conversation.
     * @param conversationId The conversation ID
     * @param conversationData The new message timer
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateConversationMessageTimer
     */
    putConversationMessageTimer(conversationId: string, messageTimerData: ConversationMessageTimerUpdateData): Promise<ConversationMessageTimerUpdateEvent>;
    /**
     * Update the receipt mode for a conversation.
     * @param conversationId The conversation ID
     * @param receiptModeData The new receipt mode
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateConversationReceiptMode
     */
    putConversationReceiptMode(conversationId: string, receiptModeData: ConversationReceiptModeUpdateData): Promise<ConversationReceiptModeUpdateEvent>;
    /**
     * Add users to an existing conversation.
     * @param conversationId The conversation ID to add the users to
     * @param userIds List of user IDs to add to a conversation
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/addMembers
     */
    postMembers(conversationId: string, userIds: string[]): Promise<ConversationMemberJoinEvent>;
    /**
     * Update membership of the specified user in a certain conversation
     * @param userId The user ID
     * @param conversationId The conversation ID to change the user's membership in
     * @param memberUpdateData The new member data
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateOtherMember
     */
    putOtherMember(userId: string, conversationId: string, memberUpdateData: ConversationOtherMemberUpdateData): Promise<void>;
    /**
     * Update self membership properties.
     * @param conversationId The Conversation ID
     * @param memberData The new conversation
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateSelf
     */
    putMembershipProperties(conversationId: string, memberData: ConversationMemberUpdateData): Promise<void>;
}
