"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationAPI = void 0;
const validation_1 = require("../validation/");
const ConversationRole_1 = require("./ConversationRole");
let ConversationAPI = /** @class */ (() => {
    class ConversationAPI {
        constructor(client) {
            this.client = client;
        }
        /**
         * Delete a conversation code.
         * @param conversationId ID of conversation to delete the code for
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/deleteConversationCode
         */
        deleteConversationCode(conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'delete',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.CODE}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Remove bot from conversation.
         * @param conversationId The conversation ID to remove the bot from
         * @param botId The ID of the bot to be removed from the conversation
         */
        deleteBot(conversationId, botId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'delete',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.BOTS}/${botId}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Remove member from conversation.
         * @param conversationId The conversation ID to remove the user from
         * @param userId The user to remove
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/removeMember
         */
        deleteMember(conversationId, userId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'delete',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.MEMBERS}/${userId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get all conversations.
         */
        getAllConversations() {
            let allConversations = [];
            const getConversationChunks = (conversationId) => __awaiter(this, void 0, void 0, function* () {
                const { conversations, has_more } = yield this.getConversations(conversationId, ConversationAPI.MAX_CHUNK_SIZE);
                if (conversations.length) {
                    allConversations = allConversations.concat(conversations);
                }
                if (has_more) {
                    const lastConversation = conversations.pop();
                    if (lastConversation) {
                        return getConversationChunks(lastConversation.id);
                    }
                }
                return allConversations;
            });
            return getConversationChunks();
        }
        /**
         * Get a conversation code.
         * @param conversationId ID of conversation to get the code for
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/getConversationCode
         */
        getConversationCode(conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'GET',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.CODE}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get a conversation by ID.
         * @param conversationId The conversation ID
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/conversation
         */
        getConversation(conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get all conversation IDs.
         * @param limit Max. number of IDs to return
         * @param conversationId Conversation ID to start from (exclusive)
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/conversationIds
         */
        getConversationIds(limit, conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        size: limit,
                        start: conversationId,
                    },
                    url: `${ConversationAPI.URL.CONVERSATIONS}/ids`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get conversations as chunks.
         * Note: At most 500 conversations are returned per request.
         * @param startConversationId Conversation ID to start from (exclusive). Mutually exclusive with `conversationIds`.
         * @param limit Max. number of conversations to return
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/conversations
         */
        getConversations(startConversationId, limit = ConversationAPI.MAX_CHUNK_SIZE) {
            return this._getConversations(startConversationId, undefined, limit);
        }
        /**
         * Get conversations.
         * Note: At most 500 conversations are returned per request.
         * @param conversationId Conversation ID to start from (exclusive). Mutually exclusive with `conversationIds`.
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/conversations
         */
        getConversationsByIds(filteredConversationIds) {
            return __awaiter(this, void 0, void 0, function* () {
                let allConversations = [];
                const getConversationChunk = (chunkedConversationIds) => __awaiter(this, void 0, void 0, function* () {
                    const { conversations } = yield this._getConversations(undefined, chunkedConversationIds, ConversationAPI.MAX_CHUNK_SIZE);
                    return conversations;
                });
                for (let index = 0; index < filteredConversationIds.length; index += ConversationAPI.MAX_CHUNK_SIZE) {
                    const requestChunk = filteredConversationIds.slice(index, index + ConversationAPI.MAX_CHUNK_SIZE);
                    if (requestChunk.length) {
                        const conversationChunk = yield getConversationChunk(requestChunk);
                        if (conversationChunk.length) {
                            allConversations = allConversations.concat(conversationChunk);
                        }
                    }
                }
                return allConversations;
            });
        }
        /**
         * Get conversations.
         * Note: At most 500 conversations are returned per request.
         * @param startConversationId Conversation ID to start from (exclusive). Mutually exclusive with `conversationIds`.
         * @param filteredConversationIds Mutually exclusive with `startConversationId`. At most 32 IDs per request.
         * @param limit Max. number of conversations to return
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/conversations
         */
        _getConversations(startConversationId, filteredConversationIds, limit = ConversationAPI.MAX_CHUNK_SIZE) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        size: limit,
                        start: startConversationId,
                    },
                    url: `${ConversationAPI.URL.CONVERSATIONS}`,
                };
                if (filteredConversationIds) {
                    config.params.ids = filteredConversationIds.join(',');
                }
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get existing roles available for the given conversation.
         * @param conversationId The Conversation ID to get roles for
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/getConversationsRoles
         */
        getRoles(conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.ROLES}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get self membership properties.
         * @param conversationId The Conversation ID to get properties for
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/getSelf
         */
        getMembershipProperties(conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/self`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Create a 1:1-conversation.
         * @param conversationData The new conversation
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/createOne2OneConversation
         */
        post1to1(conversationData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: conversationData,
                    method: 'post',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/one2one`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Add users to an existing conversation.
         * @param conversationId The conversation ID
         * @param invitationData The new conversation
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/addMembers
         */
        postAddMembers(conversationId, invitationData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: invitationData,
                    method: 'post',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.MEMBERS}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Add a bot to an existing conversation.
         * @param conversationId ID of the conversation to add bots to
         * @param providerId ID of the bot provider
         * @param serviceId ID of the service provider
         */
        postBot(conversationId, providerId, serviceId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        provider: providerId,
                        service: serviceId,
                    },
                    method: 'post',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.BOTS}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Create a new conversation
         * @param conversationData The new conversation
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/createGroupConversation
         */
        postConversation(conversationData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: conversationData,
                    method: 'post',
                    url: ConversationAPI.URL.CONVERSATIONS,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Create or recreate a conversation code.
         * @param conversationId ID of conversation to request the code for
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/createConversationCode
         */
        postConversationCodeRequest(conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'post',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.CODE}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Validate a conversation code.
         * @param conversationCode The conversation code
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/checkConversationCode
         */
        postConversationCodeCheck(conversationCode) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: conversationCode,
                    method: 'post',
                    url: `${ConversationAPI.URL.CONVERSATIONS}${ConversationAPI.URL.CODE_CHECK}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Join a conversation by conversation code.
         * @param conversationCode The conversation code
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/joinConversationByCode
         */
        postJoinByCode(conversationCode) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: conversationCode,
                    method: 'post',
                    url: `${ConversationAPI.URL.CONVERSATIONS}${ConversationAPI.URL.JOIN}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Join a conversation.
         * @param conversationId The conversation ID
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/joinConversation
         */
        postJoin(conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'post',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Post an encrypted message to a conversation.
         * @param clientId The sender's client ID
         * @param conversationId The conversation ID
         * @param messageData The message content
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/postOtrMessage
         */
        postOTRMessage(clientId, conversationId, messageData, params) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!clientId) {
                    throw new validation_1.ValidationError('Unable to send OTR message without client ID.');
                }
                if (!messageData) {
                    messageData = {
                        recipients: {},
                        sender: clientId,
                    };
                }
                const config = {
                    data: messageData,
                    method: 'post',
                    params: Object.assign({ ignore_missing: !!messageData.data }, params),
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.OTR}/${ConversationAPI.URL.MESSAGES}`,
                };
                const response = typeof messageData.recipients === 'object'
                    ? yield this.client.sendJSON(config, true)
                    : yield this.client.sendProtocolBuffer(config, true);
                return response.data;
            });
        }
        postForClients(clientId, conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    yield this.postOTRMessage(clientId, conversationId);
                    throw new Error(`Expected backend to throw error.`);
                }
                catch (error) {
                    return error.response.data;
                }
            });
        }
        /**
         * Create a self-conversation.
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/createSelfConversation
         */
        postSelf() {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'post',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/self`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Send typing notifications.
         * @param conversationId The Conversation ID to send notifications in
         * @param typingData The typing status
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/isTyping
         */
        postTyping(conversationId, typingData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: typingData,
                    method: 'post',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.TYPING}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Update access modes for a conversation.
         * @param conversationId The conversation ID to update the access mode of
         * @param accessData The new access data
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateConversationAccess
         */
        putAccess(conversationId, accessData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: accessData,
                    method: 'put',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.ACCESS}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Update conversation properties.
         * @param conversationId The conversation ID to update properties of
         * @param conversationNameData The new conversation name
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateConversation
         */
        putConversation(conversationId, conversationNameData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: conversationNameData,
                    method: 'put',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.NAME}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Update the message timer for a conversation.
         * @param conversationId The conversation ID
         * @param conversationData The new message timer
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateConversationMessageTimer
         */
        putConversationMessageTimer(conversationId, messageTimerData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: messageTimerData,
                    method: 'put',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.MESSAGE_TIMER}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Update the receipt mode for a conversation.
         * @param conversationId The conversation ID
         * @param receiptModeData The new receipt mode
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateConversationReceiptMode
         */
        putConversationReceiptMode(conversationId, receiptModeData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: receiptModeData,
                    method: 'put',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.RECEIPT_MODE}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Add users to an existing conversation.
         * @param conversationId The conversation ID to add the users to
         * @param userIds List of user IDs to add to a conversation
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/addMembers
         */
        postMembers(conversationId, userIds) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        conversation_role: ConversationRole_1.DefaultConversationRoleName.WIRE_MEMBER,
                        users: userIds,
                    },
                    method: 'post',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.MEMBERS}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Update membership of the specified user in a certain conversation
         * @param userId The user ID
         * @param conversationId The conversation ID to change the user's membership in
         * @param memberUpdateData The new member data
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateOtherMember
         */
        putOtherMember(userId, conversationId, memberUpdateData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: memberUpdateData,
                    method: 'put',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.MEMBERS}/${userId}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Update self membership properties.
         * @param conversationId The Conversation ID
         * @param memberData The new conversation
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/conversations/updateSelf
         */
        putMembershipProperties(conversationId, memberData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: memberData,
                    method: 'put',
                    url: `${ConversationAPI.URL.CONVERSATIONS}/${conversationId}/${ConversationAPI.URL.SELF}`,
                };
                yield this.client.sendJSON(config);
            });
        }
    }
    ConversationAPI.MAX_CHUNK_SIZE = 500;
    ConversationAPI.URL = {
        ACCESS: 'access',
        BOTS: 'bots',
        CLIENTS: '/clients',
        CODE: 'code',
        CODE_CHECK: '/code-check',
        CONVERSATIONS: '/conversations',
        JOIN: '/join',
        MEMBERS: 'members',
        MESSAGES: 'messages',
        MESSAGE_TIMER: 'message-timer',
        NAME: 'name',
        OTR: 'otr',
        RECEIPT_MODE: 'receipt-mode',
        ROLES: 'roles',
        SELF: 'self',
        TYPING: 'typing',
    };
    return ConversationAPI;
})();
exports.ConversationAPI = ConversationAPI;
//# sourceMappingURL=ConversationAPI.js.map