"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetAPI = void 0;
const axios_1 = __importDefault(require("axios"));
const http_1 = require("../http/");
const buffer_1 = require("../shims/node/buffer");
const random_1 = require("../shims/node/random");
const user_1 = require("../user");
const AssetRetentionPolicy_1 = require("./AssetRetentionPolicy");
const AssetUtil_1 = require("./AssetUtil");
let AssetAPI = /** @class */ (() => {
    class AssetAPI {
        constructor(client) {
            this.client = client;
        }
        getAssetV1(assetId, conversationId, forceCaching = false, progressCallback) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!AssetUtil_1.isValidUUID(assetId)) {
                    throw new TypeError(`Expected asset ID "${assetId}" to only contain alphanumeric values and dashes.`);
                }
                if (!AssetUtil_1.isValidUUID(conversationId)) {
                    throw new TypeError(`Expected conversation ID "${conversationId}" to only contain alphanumeric values and dashes.`);
                }
                const cancelSource = axios_1.default.CancelToken.source();
                const config = {
                    cancelToken: cancelSource.token,
                    method: 'get',
                    onDownloadProgress: http_1.handleProgressEvent(progressCallback),
                    onUploadProgress: http_1.handleProgressEvent(progressCallback),
                    params: {
                        conv_id: conversationId,
                    },
                    responseType: 'arraybuffer',
                    url: `${AssetAPI.ASSET_V1_URL}/${assetId}`,
                };
                if (forceCaching) {
                    config.params.forceCaching = forceCaching;
                }
                const handleRequest = () => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const response = yield this.client.sendRequest(config, true);
                        return {
                            buffer: response.data,
                            mimeType: response.headers['content-type'],
                        };
                    }
                    catch (error) {
                        if (error.message === http_1.SyntheticErrorLabel.REQUEST_CANCELLED) {
                            throw new user_1.RequestCancellationError('Asset download got cancelled.');
                        }
                        throw error;
                    }
                });
                return {
                    cancel: () => cancelSource.cancel(http_1.SyntheticErrorLabel.REQUEST_CANCELLED),
                    response: handleRequest(),
                };
            });
        }
        getAssetV2(assetId, conversationId, forceCaching = false, progressCallback) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!AssetUtil_1.isValidUUID(assetId)) {
                    throw new TypeError(`Expected asset ID "${assetId}" to only contain alphanumeric values and dashes.`);
                }
                if (!AssetUtil_1.isValidUUID(conversationId)) {
                    throw new TypeError(`Expected conversation ID "${conversationId}" to only contain alphanumeric values and dashes.`);
                }
                const cancelSource = axios_1.default.CancelToken.source();
                const config = {
                    cancelToken: cancelSource.token,
                    method: 'get',
                    onDownloadProgress: http_1.handleProgressEvent(progressCallback),
                    onUploadProgress: http_1.handleProgressEvent(progressCallback),
                    params: {},
                    responseType: 'arraybuffer',
                    url: `${AssetAPI.ASSET_V2_CONVERSATION_URL}/${conversationId}${AssetAPI.ASSET_V2_URL}/${assetId}`,
                };
                if (forceCaching) {
                    config.params.forceCaching = forceCaching;
                }
                const handleRequest = () => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const response = yield this.client.sendRequest(config, true);
                        return {
                            buffer: response.data,
                            mimeType: response.headers['content-type'],
                        };
                    }
                    catch (error) {
                        if (error.message === http_1.SyntheticErrorLabel.REQUEST_CANCELLED) {
                            throw new user_1.RequestCancellationError('Asset download got cancelled.');
                        }
                        throw error;
                    }
                });
                return {
                    cancel: () => cancelSource.cancel(http_1.SyntheticErrorLabel.REQUEST_CANCELLED),
                    response: handleRequest(),
                };
            });
        }
        getAssetV3(assetId, token, forceCaching = false, progressCallback) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!AssetUtil_1.isValidUUID(assetId)) {
                    throw new TypeError(`Expected asset ID "${assetId}" to only contain alphanumeric values and dashes.`);
                }
                if (token && !AssetUtil_1.isValidToken(token)) {
                    throw new TypeError(`Expected token "${token.substr(0, 5)}..." (redacted) to be base64 encoded string.`);
                }
                const cancelSource = axios_1.default.CancelToken.source();
                const config = {
                    cancelToken: cancelSource.token,
                    method: 'get',
                    onDownloadProgress: http_1.handleProgressEvent(progressCallback),
                    onUploadProgress: http_1.handleProgressEvent(progressCallback),
                    params: {},
                    responseType: 'arraybuffer',
                    url: `${AssetAPI.ASSET_V3_URL}/${assetId}`,
                };
                if (token) {
                    config.params.asset_token = token;
                }
                if (forceCaching) {
                    config.params.forceCaching = forceCaching;
                }
                const handleRequest = () => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const response = yield this.client.sendRequest(config, true);
                        return {
                            buffer: response.data,
                            mimeType: response.headers['content-type'],
                        };
                    }
                    catch (error) {
                        if (error.message === http_1.SyntheticErrorLabel.REQUEST_CANCELLED) {
                            throw new user_1.RequestCancellationError('Asset download got cancelled.');
                        }
                        throw error;
                    }
                });
                return {
                    cancel: () => cancelSource.cancel(http_1.SyntheticErrorLabel.REQUEST_CANCELLED),
                    response: handleRequest(),
                };
            });
        }
        postAsset(asset, options, progressCallback) {
            return __awaiter(this, void 0, void 0, function* () {
                const BOUNDARY = `Frontier${random_1.unsafeAlphanumeric()}`;
                const metadata = JSON.stringify(Object.assign({ public: true, retention: AssetRetentionPolicy_1.AssetRetentionPolicy.PERSISTENT }, options));
                let body = '';
                body += `--${BOUNDARY}\r\n`;
                body += 'Content-Type: application/json;charset=utf-8\r\n';
                body += `Content-length: ${metadata.length}\r\n`;
                body += '\r\n';
                body += `${metadata}\r\n`;
                body += `--${BOUNDARY}\r\n`;
                body += 'Content-Type: application/octet-stream\r\n';
                body += `Content-length: ${asset.length}\r\n`;
                body += `Content-MD5: ${buffer_1.base64MD5FromBuffer(asset.buffer)}\r\n`;
                body += '\r\n';
                const footer = `\r\n--${BOUNDARY}--\r\n`;
                const cancelSource = axios_1.default.CancelToken.source();
                const config = {
                    cancelToken: cancelSource.token,
                    data: buffer_1.concatToBuffer(body, asset, footer),
                    headers: {
                        'Content-Type': `multipart/mixed; boundary=${BOUNDARY}`,
                    },
                    method: 'post',
                    onDownloadProgress: http_1.handleProgressEvent(progressCallback),
                    onUploadProgress: http_1.handleProgressEvent(progressCallback),
                    url: AssetAPI.ASSET_V3_URL,
                };
                const handleRequest = () => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const response = yield this.client.sendRequest(config);
                        return response.data;
                    }
                    catch (error) {
                        if (error.message === http_1.SyntheticErrorLabel.REQUEST_CANCELLED) {
                            throw new user_1.RequestCancellationError('Asset upload got cancelled.');
                        }
                        throw error;
                    }
                });
                return {
                    cancel: () => cancelSource.cancel(http_1.SyntheticErrorLabel.REQUEST_CANCELLED),
                    response: handleRequest(),
                };
            });
        }
    }
    AssetAPI.ASSET_V3_URL = '/assets/v3';
    AssetAPI.ASSET_V2_URL = '/otr/assets';
    AssetAPI.ASSET_V2_CONVERSATION_URL = '/conversations';
    AssetAPI.ASSET_V1_URL = '/assets';
    return AssetAPI;
})();
exports.AssetAPI = AssetAPI;
//# sourceMappingURL=AssetAPI.js.map