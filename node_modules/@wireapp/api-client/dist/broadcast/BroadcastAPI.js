"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BroadcastAPI = void 0;
const validation_1 = require("../validation/");
let BroadcastAPI = /** @class */ (() => {
    class BroadcastAPI {
        constructor(client) {
            this.client = client;
        }
        /**
         * Broadcast an encrypted message to all team members and all contacts (accepts Protobuf).
         * @param clientId The sender's client ID
         * @param messageData The message content
         * @param ignoreMissing Whether to report missing clients or not:
         * `false`: Report about all missing clients
         * `true`: Ignore all missing clients and force sending
         * `undefined`: Default to setting of `report_missing` in `NewOTRMessage`
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/tab.html#!/postOtrBroadcast
         */
        postBroadcastMessage(clientId, messageData, ignoreMissing) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!clientId) {
                    throw new validation_1.ValidationError('Unable to send OTR message without client ID.');
                }
                const config = {
                    data: messageData,
                    method: 'post',
                    url: BroadcastAPI.URL.BROADCAST,
                };
                if (typeof ignoreMissing === 'boolean') {
                    config.params = { ignore_missing: ignoreMissing };
                }
                const response = typeof messageData.recipients === 'object'
                    ? yield this.client.sendJSON(config)
                    : yield this.client.sendProtocolBuffer(config);
                return response.data;
            });
        }
    }
    BroadcastAPI.URL = {
        BROADCAST: '/broadcast/otr/messages',
    };
    return BroadcastAPI;
})();
exports.BroadcastAPI = BroadcastAPI;
//# sourceMappingURL=BroadcastAPI.js.map