"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-magic-numbers, dot-notation */
const nock_1 = __importDefault(require("nock"));
const APIClient_1 = require("./APIClient");
const AuthAPI_1 = require("./auth/AuthAPI");
const client_1 = require("./client");
const UserAPI_1 = require("./user/UserAPI");
describe('APIClient', () => {
    const baseUrl = APIClient_1.APIClient.BACKEND.PRODUCTION.rest;
    let accessTokenData = {
        access_token: 'iJCRCjc8oROO-dkrkqCXOade997oa8Jhbz6awMUQPBQo80VenWqp_oNvfY6AnU5BxEsdDPOBfBP-uz_b0gAKBQ==.v=1.k=1.d=1498600993.t=a.l=.u=aaf9a833-ef30-4c22-86a0-9adc8a15b3b4.c=15037015562284012115',
        expires_in: 900,
        token_type: 'Bearer',
        user: 'aaf9a833-ef30-4c22-86a0-9adc8a15b3b4',
    };
    describe('"constructor"', () => {
        it('constructs a client with production backend and StoreEngine by default', () => {
            const client = new APIClient_1.APIClient();
            expect(client.transport.http['baseUrl']).toBe(APIClient_1.APIClient.BACKEND.PRODUCTION.rest);
            expect(client.transport.ws['baseUrl']).toBe(APIClient_1.APIClient.BACKEND.PRODUCTION.ws);
        });
        it('constructs StoreEngine when only the URLs is provided', () => {
            const client = new APIClient_1.APIClient({ urls: APIClient_1.APIClient.BACKEND.PRODUCTION });
            expect(client.transport.http['baseUrl']).toBe(APIClient_1.APIClient.BACKEND.PRODUCTION.rest);
            expect(client.transport.ws['baseUrl']).toBe(APIClient_1.APIClient.BACKEND.PRODUCTION.ws);
        });
        it('constructs URLs when only the StoreEngine is provided', () => {
            const client = new APIClient_1.APIClient();
            expect(client.transport.http['baseUrl']).toBe(APIClient_1.APIClient.BACKEND.PRODUCTION.rest);
            expect(client.transport.ws['baseUrl']).toBe(APIClient_1.APIClient.BACKEND.PRODUCTION.ws);
        });
    });
    describe('"login"', () => {
        accessTokenData = {
            access_token: 'iJCRCjc8oROO-dkrkqCXOade997oa8Jhbz6awMUQPBQo80VenWqp_oNvfY6AnU5BxEsdDPOBfBP-uz_b0gAKBQ==.v=1.k=1.d=1498600993.t=a.l=.u=aaf9a833-ef30-4c22-86a0-9adc8a15b3b4.c=15037015562284012115',
            expires_in: 900,
            token_type: 'Bearer',
            user: 'aaf9a833-ef30-4c22-86a0-9adc8a15b3b4',
        };
        const loginData = {
            clientType: client_1.ClientType.TEMPORARY,
            email: 'me@mail.com',
            password: 'top-secret',
        };
        const userData = [
            {
                accent_id: 0,
                assets: [],
                handle: 'webappbot',
                id: '062418ea-9b93-4d93-b59b-11aba3f702d8',
                name: 'Webapp Bot',
                picture: [
                    {
                        content_length: 7023,
                        content_type: 'image/jpeg',
                        data: null,
                        id: 'bb5c861e-b133-46e1-a92b-555218ecdf52',
                        info: {
                            correlation_id: '83f6d538-fc38-4e24-97ae-312f079f3594',
                            height: 280,
                            nonce: '83f6d538-fc38-4e24-97ae-312f079f3594',
                            original_height: 1080,
                            original_width: 1920,
                            public: true,
                            tag: 'smallProfile',
                            width: 280,
                        },
                    },
                    {
                        content_length: 94027,
                        content_type: 'image/jpeg',
                        data: null,
                        id: 'efd732aa-2ff2-4959-968a-a621dda342b6',
                        info: {
                            correlation_id: '83f6d538-fc38-4e24-97ae-312f079f3594',
                            height: 1080,
                            nonce: '83f6d538-fc38-4e24-97ae-312f079f3594',
                            original_height: 1080,
                            original_width: 1920,
                            public: true,
                            tag: 'medium',
                            width: 1920,
                        },
                    },
                ],
            },
        ];
        beforeEach(() => {
            nock_1.default(baseUrl)
                .post(`${AuthAPI_1.AuthAPI.URL.LOGIN}`, {
                email: loginData.email,
                password: loginData.password,
            })
                .query({ persist: loginData.clientType === 'permanent' })
                .reply(200, accessTokenData);
            nock_1.default(baseUrl).post(`${AuthAPI_1.AuthAPI.URL.ACCESS}/${AuthAPI_1.AuthAPI.URL.LOGOUT}`).reply(200, undefined);
        });
        it('creates a context from a successful login', () => __awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const client = new APIClient_1.APIClient();
            const context = yield client.login(loginData);
            expect(context.userId).toBe(accessTokenData.user);
            expect((_a = client['accessTokenStore'].accessToken) === null || _a === void 0 ? void 0 : _a.access_token).toBe(accessTokenData.access_token);
        }));
        it('can login after a logout', () => __awaiter(void 0, void 0, void 0, function* () {
            const client = new APIClient_1.APIClient();
            yield client.login(loginData);
            return client.logout();
        }));
        it('refreshes an access token when it becomes invalid', () => __awaiter(void 0, void 0, void 0, function* () {
            var _b, _c;
            const queriedHandle = 'webappbot';
            nock_1.default(baseUrl).get(UserAPI_1.UserAPI.URL.USERS).query({ handles: queriedHandle }).once().reply(401);
            nock_1.default(baseUrl).get(UserAPI_1.UserAPI.URL.USERS).query({ handles: queriedHandle }).twice().reply(200, userData);
            nock_1.default(baseUrl).post(AuthAPI_1.AuthAPI.URL.ACCESS).reply(200, accessTokenData);
            const client = new APIClient_1.APIClient();
            const context = yield client.login(loginData);
            expect(context.userId).toBe(accessTokenData.user);
            // Make access token invalid
            (_b = client['accessTokenStore'].accessToken) === null || _b === void 0 ? true : delete _b.access_token;
            const response = yield client.user.api.getUsers({ handles: [queriedHandle] });
            expect(response[0].name).toBe(userData[0].name);
            expect((_c = client['accessTokenStore'].accessToken) === null || _c === void 0 ? void 0 : _c.access_token).toBeDefined();
        }));
    });
    describe('"logout"', () => {
        beforeEach(() => {
            nock_1.default(baseUrl).post(`${AuthAPI_1.AuthAPI.URL.ACCESS}/${AuthAPI_1.AuthAPI.URL.LOGOUT}`).reply(200);
        });
        it('can logout a user', () => __awaiter(void 0, void 0, void 0, function* () {
            const client = new APIClient_1.APIClient();
            client.context = client['createContext']('3721e5d3-558d-45ac-b476-b4a64a8f74c1', client_1.ClientType.TEMPORARY, 'dce3d529-51e6-40c2-9147-e091eef48e73');
            yield client.logout();
        }));
        it('ignores errors when told to', () => __awaiter(void 0, void 0, void 0, function* () {
            const client = new APIClient_1.APIClient();
            const testError = new Error('Test rejection');
            spyOn(client.auth.api, 'postLogout').and.returnValue(Promise.reject(testError));
            spyOn(client, 'disconnect').and.returnValue();
            spyOn(client['accessTokenStore'], 'delete').and.returnValue(Promise.resolve(undefined));
            spyOn(client['logger'], 'error').and.returnValue();
            yield client.logout({ ignoreError: true });
            expect(client['logger'].error).toHaveBeenCalledWith(testError);
        }));
        it('stops at errors when told to', () => __awaiter(void 0, void 0, void 0, function* () {
            const client = new APIClient_1.APIClient();
            const testError = new Error('Test rejection');
            spyOn(client.auth.api, 'postLogout').and.returnValue(Promise.reject(testError));
            spyOn(client['logger'], 'error').and.returnValue();
            try {
                yield client.logout();
                fail('Did not throw error');
            }
            catch (error) {
                expect(error === testError);
                expect(client['logger'].error).toHaveBeenCalledTimes(0);
            }
        }));
    });
    describe('"register"', () => {
        const registerData = {
            accent_id: 0,
            assets: [],
            email: 'user@wire.com',
            id: 'aaf9a833-ef30-4c22-86a0-9adc8a15b3b4',
            locale: 'de',
            name: 'unique_username',
            picture: [],
        };
        beforeEach(() => {
            nock_1.default(baseUrl).post(AuthAPI_1.AuthAPI.URL.REGISTER, registerData).reply(200, registerData);
            nock_1.default(baseUrl).post(AuthAPI_1.AuthAPI.URL.ACCESS).reply(200, accessTokenData);
        });
        it('automatically gets an access token after registration', () => __awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const client = new APIClient_1.APIClient();
            const context = yield client.register(registerData);
            expect(context.userId).toBe(registerData.id);
            expect((_a = client['accessTokenStore'].accessToken) === null || _a === void 0 ? void 0 : _a.access_token).toBe(accessTokenData.access_token);
        }));
    });
});
//# sourceMappingURL=APIClient.test.node.js.map