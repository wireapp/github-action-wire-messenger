"use strict";
/*
 * Wire
 * Copyright (C) 2019 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountAPI = void 0;
const http_1 = require("../http");
const AccountError_1 = require("./AccountError");
let AccountAPI = /** @class */ (() => {
    class AccountAPI {
        constructor(client) {
            this.client = client;
        }
        /**
         * Delete account
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/delete
         */
        postDeleteAccount(key, code) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        code,
                        key,
                    },
                    method: 'post',
                    url: AccountAPI.URL.DELETE,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Start password reset flow
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/password-reset
         */
        postPasswordReset(email) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        email,
                    },
                    method: 'post',
                    url: AccountAPI.URL.PASSWORD_RESET,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Start bot password reset flow
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/provider/password-reset
         */
        postBotPasswordReset(email) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        email,
                    },
                    method: 'post',
                    url: `${AccountAPI.URL.PROVIDER}${AccountAPI.URL.PASSWORD_RESET}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Finish password reset flow
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/password-reset/complete
         */
        postPasswordResetComplete(password, key, code) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        code,
                        key,
                        password,
                    },
                    method: 'post',
                    url: `${AccountAPI.URL.PASSWORD_RESET}/${AccountAPI.URL.PASSWORD_RESET_COMPLETE}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Finish bot password reset flow
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/provider/password-reset/complete
         */
        postBotPasswordResetComplete(password, key, code) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        code,
                        key,
                        password,
                    },
                    method: 'post',
                    url: `${AccountAPI.URL.PROVIDER}${AccountAPI.URL.PASSWORD_RESET}/${AccountAPI.URL.PASSWORD_RESET_COMPLETE}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Verify email address
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/activate
         */
        getVerifyEmail(key, code) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        code,
                        key,
                    },
                    url: AccountAPI.URL.ACTIVATE,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Verify service
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/provider/activate
         */
        getVerifyBot(key, code) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        code,
                        key,
                    },
                    url: `${AccountAPI.URL.PROVIDER}${AccountAPI.URL.ACTIVATE}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        getDomain(domain) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${AccountAPI.URL.CUSTOM_BACKEND}/${AccountAPI.URL.BY_DOMAIN}/${domain}`,
                };
                try {
                    const response = yield this.client.sendJSON(config);
                    return response.data;
                }
                catch (error) {
                    switch (error.label) {
                        case http_1.BackendErrorLabel.CUSTOM_BACKEND_NOT_FOUND: {
                            throw new AccountError_1.CustomBackendNotFoundError(error.message);
                        }
                    }
                    throw error;
                }
            });
        }
        getSSOSettings() {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${AccountAPI.URL.SSO}/${AccountAPI.URL.SETTINGS}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Retrieve all TURN server addresses and credentials.
         * Clients are expected to do a DNS lookup to resolve the IP addresses of the given hostnames
         *
         * @param limit Limits the number of ICE-Candidates returned. [1..10]
         */
        getCallConfig(limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        limit,
                    },
                    url: `${AccountAPI.URL.CALLS}/${AccountAPI.URL.CALLS_CONFIG}/${AccountAPI.URL.CALLS_CONFIG_V2}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        getConfig() {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${AccountAPI.URL.BACKEND_CONFIG}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
    }
    AccountAPI.URL = {
        ACTIVATE: '/activate',
        BACKEND_CONFIG: '/config.json',
        BY_DOMAIN: 'by-domain',
        CALLS: '/calls',
        CALLS_CONFIG: 'config',
        CALLS_CONFIG_V2: 'v2',
        CUSTOM_BACKEND: '/custom-backend',
        DELETE: '/delete',
        PASSWORD_RESET: '/password-reset',
        PASSWORD_RESET_COMPLETE: 'complete',
        PROVIDER: '/provider',
        SETTINGS: 'settings',
        SSO: '/sso',
    };
    return AccountAPI;
})();
exports.AccountAPI = AccountAPI;
//# sourceMappingURL=AccountAPI.js.map