"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationAPI = exports.NOTIFICATION_SIZE_MAXIMUM = void 0;
exports.NOTIFICATION_SIZE_MAXIMUM = 10000;
let NotificationAPI = /** @class */ (() => {
    class NotificationAPI {
        constructor(client) {
            this.client = client;
        }
        /**
         * Fetch the last notification.
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/push/getLastNotification
         */
        getLastNotification(clientId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        client: clientId,
                    },
                    url: `${NotificationAPI.URL.NOTIFICATION}/${NotificationAPI.URL.LAST}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Fetch paged notifications.
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/push/fetchNotifications
         */
        getNotifications(clientId, size = exports.NOTIFICATION_SIZE_MAXIMUM, since) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        client: clientId,
                        since,
                        size,
                    },
                    url: NotificationAPI.URL.NOTIFICATION,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Fetch all notifications.
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/push/fetchNotifications
         */
        getAllNotifications(clientId, lastNotificationId) {
            return __awaiter(this, void 0, void 0, function* () {
                let notificationList = [];
                const getNotificationChunks = (clientId, lastNotificationId) => __awaiter(this, void 0, void 0, function* () {
                    const { notifications, has_more } = yield this.getNotifications(clientId, exports.NOTIFICATION_SIZE_MAXIMUM, lastNotificationId);
                    if (notifications.length) {
                        notificationList = notificationList.concat(notifications);
                    }
                    if (has_more) {
                        const lastNotification = notifications[notifications.length - 1];
                        if (lastNotification) {
                            return getNotificationChunks(clientId, lastNotification.id);
                        }
                    }
                    return notificationList;
                });
                return getNotificationChunks(clientId, lastNotificationId);
            });
        }
        /**
         * Fetch a notification by ID.
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/push/getNotification
         */
        getNotification(notificationId, clientId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        client: clientId,
                    },
                    url: `${NotificationAPI.URL.NOTIFICATION}/${notificationId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
    }
    NotificationAPI.URL = {
        LAST: 'last',
        NOTIFICATION: '/notifications',
    };
    return NotificationAPI;
})();
exports.NotificationAPI = NotificationAPI;
//# sourceMappingURL=NotificationAPI.js.map