"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionAPI = void 0;
let ConnectionAPI = /** @class */ (() => {
    class ConnectionAPI {
        constructor(client) {
            this.client = client;
        }
        /**
         * Get an existing connection to another user.
         * @param userId The ID of the other user
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/connection
         */
        getConnection(userId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${ConnectionAPI.URL.CONNECTIONS}/${userId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * List the connections to other users.
         * @param limit Number of results to return (default 100, max 500)
         * @param connectionId The connection ID to start from
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/connections
         */
        getConnections(connectionId, limit = 100) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        size: limit,
                        start: connectionId,
                    },
                    url: ConnectionAPI.URL.CONNECTIONS,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get all connections to other users.
         */
        getAllConnections() {
            let allConnections = [];
            const getConnectionChunks = (connectionId) => __awaiter(this, void 0, void 0, function* () {
                const connectionsPerRequest = 500;
                const { connections, has_more } = yield this.getConnections(connectionId, connectionsPerRequest);
                if (connections.length) {
                    allConnections = allConnections.concat(connections);
                }
                if (has_more) {
                    const lastConnection = connections.pop();
                    if (lastConnection) {
                        return getConnectionChunks(lastConnection.to);
                    }
                }
                return allConnections;
            });
            return getConnectionChunks();
        }
        /**
         * Create a connection to another user.
         * Note: You can have no more than 1000 connections in accepted or sent state.
         * @param connectionRequestData: The connection request
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/createConnection
         */
        postConnection(connectionRequestData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: connectionRequestData,
                    method: 'post',
                    url: ConnectionAPI.URL.CONNECTIONS,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Update a connection.
         * Note: You can have no more than 1000 connections in accepted or sent state.
         * @param userId The ID of the other user
         * @param updatedConnection: The updated connection
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/updateConnection
         */
        putConnection(userId, updatedConnection) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: updatedConnection,
                    method: 'put',
                    url: `${ConnectionAPI.URL.CONNECTIONS}/${userId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
    }
    ConnectionAPI.URL = {
        CONNECTIONS: '/connections',
    };
    return ConnectionAPI;
})();
exports.ConnectionAPI = ConnectionAPI;
//# sourceMappingURL=ConnectionAPI.js.map