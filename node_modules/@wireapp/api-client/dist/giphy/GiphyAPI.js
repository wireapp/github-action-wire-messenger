"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GiphyAPI = void 0;
let GiphyAPI = /** @class */ (() => {
    class GiphyAPI {
        constructor(client) {
            this.client = client;
        }
        /**
         * Get multiple Giphy images by IDs.
         * @see https://developers.giphy.com/docs/api/endpoint#get-gifs-by-id
         */
        getGiphyByIds(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const allIds = options.ids.join(',');
                delete options.ids;
                const config = {
                    method: 'get',
                    params: options,
                    url: `${GiphyAPI.URL.PROXY}/${GiphyAPI.URL.GIPHY}/${allIds}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get a Giphy image by its ID.
         * @see https://developers.giphy.com/docs/api/endpoint#get-gif-by-id
         */
        getGiphyById(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${GiphyAPI.URL.PROXY}/${GiphyAPI.URL.GIPHY}/${id}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get a random GIF from Giphy.
         * @see https://developers.giphy.com/docs/api/endpoint#random
         */
        getGiphyRandom(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: options,
                    url: `${GiphyAPI.URL.PROXY}/${GiphyAPI.URL.GIPHY}/${GiphyAPI.URL.RANDOM}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get GIF search results from Giphy.
         * @see https://developers.giphy.com/docs/api/endpoint#search
         */
        getGiphySearch(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: options,
                    url: `${GiphyAPI.URL.PROXY}/${GiphyAPI.URL.GIPHY}/${GiphyAPI.URL.SEARCH}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get GIF trending results from Giphy.
         * @see https://developers.giphy.com/docs/api/endpoint#trending
         */
        getGiphyTrending(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: options,
                    url: `${GiphyAPI.URL.PROXY}/${GiphyAPI.URL.GIPHY}/${GiphyAPI.URL.TRENDING}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
    }
    GiphyAPI.URL = {
        GIPHY: 'giphy/v1/gifs',
        PROXY: '/proxy',
        RANDOM: 'random',
        SEARCH: 'search',
        TRENDING: 'trending',
    };
    return GiphyAPI;
})();
exports.GiphyAPI = GiphyAPI;
//# sourceMappingURL=GiphyAPI.js.map