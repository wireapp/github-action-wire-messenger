"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthAPI = void 0;
const client_1 = require("../client/");
const http_1 = require("../http/");
const cookie_1 = require("../shims/node/cookie");
const AuthenticationError_1 = require("./AuthenticationError");
let AuthAPI = /** @class */ (() => {
    class AuthAPI {
        constructor(client) {
            this.client = client;
        }
        getCookies(labels) {
            const config = {
                method: 'get',
                params: {},
                url: AuthAPI.URL.COOKIES,
            };
            if (labels) {
                config.params.labels = labels.join(',');
            }
            return this.client.sendRequest(config);
        }
        postCookiesRemove(password, labels, ids) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        ids,
                        labels,
                        password,
                    },
                    method: 'post',
                    url: `${AuthAPI.URL.COOKIES}/remove`,
                    withCredentials: true,
                };
                yield this.client.sendJSON(config);
            });
        }
        postLogin(loginData) {
            return __awaiter(this, void 0, void 0, function* () {
                const login = Object.assign(Object.assign({}, loginData), { clientType: undefined, password: loginData.password ? String(loginData.password) : undefined });
                const config = {
                    data: login,
                    method: 'post',
                    params: {
                        persist: loginData.clientType === client_1.ClientType.PERMANENT,
                    },
                    url: AuthAPI.URL.LOGIN,
                    withCredentials: true,
                };
                const response = yield this.client.sendJSON(config);
                return cookie_1.retrieveCookie(response);
            });
        }
        /**
         * This operation generates and sends a login code. A login code can be used only once and times out after 10
         * minutes. Only one login code may be pending at a time.
         * @param loginRequest Phone number to use for login SMS or voice call.
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/tab.html#!/sendLoginCode
         */
        postLoginSend(loginRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                // https://github.com/zinfra/backend-issues/issues/974
                const defaultLoginRequest = { force: false };
                const config = {
                    data: Object.assign(Object.assign({}, defaultLoginRequest), loginRequest),
                    method: 'post',
                    url: `${AuthAPI.URL.LOGIN}/${AuthAPI.URL.SEND}`,
                };
                try {
                    const response = yield this.client.sendJSON(config);
                    return response.data;
                }
                catch (error) {
                    switch (error.label) {
                        case http_1.BackendErrorLabel.BAD_REQUEST: {
                            throw new AuthenticationError_1.InvalidPhoneNumberError(error.message);
                        }
                        case http_1.BackendErrorLabel.INVALID_PHONE:
                        case http_1.BackendErrorLabel.UNAUTHORIZED: {
                            throw new AuthenticationError_1.ForbiddenPhoneNumberError(error.message);
                        }
                        case http_1.BackendErrorLabel.PASSWORD_EXISTS: {
                            throw new AuthenticationError_1.PasswordExistsError(error.message);
                        }
                    }
                    throw error;
                }
            });
        }
        postLogout() {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'post',
                    url: `${AuthAPI.URL.ACCESS}/${AuthAPI.URL.LOGOUT}`,
                    withCredentials: true,
                };
                yield cookie_1.sendRequestWithCookie(this.client, config);
            });
        }
        postRegister(userAccount) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: userAccount,
                    method: 'post',
                    url: AuthAPI.URL.REGISTER,
                    withCredentials: true,
                };
                const response = yield this.client.sendJSON(config);
                return cookie_1.retrieveCookie(response);
            });
        }
        headInitiateLogin(ssoCode) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'head',
                    url: `${AuthAPI.URL.SSO}/${AuthAPI.URL.INITIATE_LOGIN}/${ssoCode}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        headInitiateBind(ssoCode) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'head',
                    url: `${AuthAPI.URL.INITIATE_BIND}/${ssoCode}`,
                };
                yield this.client.sendJSON(config);
            });
        }
    }
    AuthAPI.URL = {
        ACCESS: '/access',
        COOKIES: '/cookies',
        INITIATE_BIND: '/sso-initiate-bind',
        INITIATE_LOGIN: 'initiate-login',
        LOGIN: '/login',
        LOGOUT: 'logout',
        REGISTER: '/register',
        SEND: 'send',
        SSO: '/sso',
    };
    return AuthAPI;
})();
exports.AuthAPI = AuthAPI;
//# sourceMappingURL=AuthAPI.js.map