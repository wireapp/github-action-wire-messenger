"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserAPI = void 0;
const axios_1 = __importDefault(require("axios"));
const commons_1 = require("@wireapp/commons");
const http_1 = require("../http/");
const UserError_1 = require("./UserError");
let UserAPI = /** @class */ (() => {
    class UserAPI {
        constructor(client) {
            this.client = client;
        }
        /**
         * Clear all properties.
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/clearProperties
         */
        deleteProperties() {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'delete',
                    url: UserAPI.URL.PROPERTIES,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Delete a property.
         * @param propertyKey The property key to delete
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/deleteProperty
         */
        deleteProperty(propertyKey) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'delete',
                    url: `${UserAPI.URL.PROPERTIES}/${propertyKey}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Activate (i.e. confirm) an email address or phone number.
         * @param activationCode Activation code
         * @param activationKey Activation key
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/activate
         */
        getActivation(activationCode, activationKey) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        code: activationCode,
                        key: activationKey,
                    },
                    url: UserAPI.URL.ACTIVATE,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Retrieve TURN server addresses and credentials.
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getCallsConfig
         */
        getCallsConfiguration() {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${UserAPI.URL.CALLS}/config`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get a specific client of a user.
         * @param userId The user ID
         * @param clientId The client ID
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getUserClient
         */
        getClient(userId, clientId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${UserAPI.URL.USERS}/${userId}/${UserAPI.URL.CLIENTS}/${clientId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get a prekey for a specific client of a user.
         * @param userId The user ID
         * @param clientId The client ID
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getPrekey
         */
        getClientPreKey(userId, clientId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${UserAPI.URL.USERS}/${userId}/${UserAPI.URL.PRE_KEYS}/${clientId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get all of a user's clients.
         * @param userId The user ID
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getUserClients
         */
        getClients(userId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${UserAPI.URL.USERS}/${userId}/${UserAPI.URL.CLIENTS}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get information on a user handle.
         * @param handle The user's handle
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getUserHandleInfo
         */
        getHandle(handle) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${UserAPI.URL.USERS}/${UserAPI.URL.HANDLES}/${handle}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * List all property keys.
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/listPropertyKeys
         */
        getProperties() {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: UserAPI.URL.PROPERTIES,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get a property value.
         * @param propertyKey The property key to get
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getProperty
         */
        getProperty(propertyKey) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${UserAPI.URL.PROPERTIES}/${propertyKey}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Search for users.
         * @param query The search query
         * @param limit Number of results to return
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/search
         */
        getSearchContacts(query, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const cancelSource = axios_1.default.CancelToken.source();
                const config = {
                    cancelToken: cancelSource.token,
                    method: 'get',
                    params: {
                        q: query,
                    },
                    url: `${UserAPI.URL.SEARCH}/${UserAPI.URL.CONTACTS}`,
                };
                if (limit) {
                    config.params.size = limit;
                }
                const handleRequest = () => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const response = yield this.client.sendJSON(config);
                        return response.data;
                    }
                    catch (error) {
                        if (error.message === http_1.SyntheticErrorLabel.REQUEST_CANCELLED) {
                            throw new UserError_1.RequestCancellationError('Search request got cancelled');
                        }
                        throw error;
                    }
                });
                return {
                    cancel: () => cancelSource.cancel(http_1.SyntheticErrorLabel.REQUEST_CANCELLED),
                    response: handleRequest(),
                };
            });
        }
        /**
         * Get a user by ID.
         * @note If you want to get all properties (`sso_id`, `managed_by`, etc.) for your own user, use "/self". Otherwise you will get a user payload with a limited set of properties (what's publicly available).
         * @param userId The user ID
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/user
         */
        getUser(userId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${UserAPI.URL.USERS}/${userId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get a prekey for each client of a user.
         * @param userId
         */
        getUserPreKeys(userId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${UserAPI.URL.USERS}/${userId}/${UserAPI.URL.PRE_KEYS}`,
                };
                const response = yield this.client.sendJSON(config, true);
                return response.data;
            });
        }
        getUsers(parameters, limit = UserAPI.DEFAULT_USERS_CHUNK_SIZE) {
            return __awaiter(this, void 0, void 0, function* () {
                const { handles, ids } = parameters;
                if (handles === null || handles === void 0 ? void 0 : handles.length) {
                    const uniqueHandles = commons_1.ArrayUtil.removeDuplicates(handles);
                    const handleChunks = commons_1.ArrayUtil.chunk(uniqueHandles, limit);
                    const resolvedTasks = yield Promise.all(handleChunks.map(handleChunk => this._getUsers({ handles: handleChunk })));
                    return commons_1.ArrayUtil.flatten(resolvedTasks);
                }
                if (ids === null || ids === void 0 ? void 0 : ids.length) {
                    const uniqueIds = commons_1.ArrayUtil.removeDuplicates(ids);
                    const idChunks = commons_1.ArrayUtil.chunk(uniqueIds, limit);
                    const resolvedTasks = yield Promise.all(idChunks.map(idChunk => this._getUsers({ ids: idChunk })));
                    return commons_1.ArrayUtil.flatten(resolvedTasks);
                }
                return [];
            });
        }
        _getUsers(parameters) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {},
                    url: UserAPI.URL.USERS,
                };
                if (parameters.handles) {
                    config.params.handles = parameters.handles.join(',');
                }
                else if (parameters.ids) {
                    config.params.ids = parameters.ids.join(',');
                }
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * DEPRECATED: List users.
         * @deprecated
         * @param userIds Multiple user's IDs
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/users
         */
        getUsersByIds(userIds) {
            return __awaiter(this, void 0, void 0, function* () {
                const maxChunkSize = 100;
                return this.getUsers({ ids: userIds }, maxChunkSize);
            });
        }
        /**
         * Activate (i.e. confirm) an email address or phone number.
         * Note: Activation only succeeds once and the number of failed attempts for a valid key is limited.
         * @param activationData Data to activate an account
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/activate_0
         */
        postActivation(activationData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: activationData,
                    method: 'post',
                    url: UserAPI.URL.ACTIVATE,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Send (or resend) an email or phone activation code.
         * @param activationCodeData Data to send an activation code
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/sendActivationCode
         */
        postActivationCode(activationCodeData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: activationCodeData,
                    method: 'post',
                    url: `${UserAPI.URL.ACTIVATE}/${UserAPI.URL.SEND}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Verify account deletion with a code.
         * @param verificationData Data to verify the account deletion
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/verifyDeleteUser
         */
        postDelete(verificationData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: verificationData,
                    method: 'post',
                    url: UserAPI.URL.DELETE,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Check availability of user handles.
         * @param handles The handles to check
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/checkUserHandles
         */
        postHandles(handles) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: handles,
                    method: 'post',
                    url: `${UserAPI.URL.USERS}/${UserAPI.URL.HANDLES}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Check availability of a single user handle.
         * @param handle The handle to check
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/checkUserHandle
         */
        headHandle(handle) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'head',
                    url: `${UserAPI.URL.USERS}/${UserAPI.URL.HANDLES}/${handle}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Get a user by handle.
         * @param handle The handle of a user to search for
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getUserByHandle
         */
        getUserByHandle(handle) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${UserAPI.URL.USERS}/${UserAPI.URL.HANDLES}/${handle}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        _postMultiPreKeyBundlesChunk(userClientMap) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: userClientMap,
                    method: 'post',
                    url: `${UserAPI.URL.USERS}/${UserAPI.URL.PRE_KEYS}`,
                };
                const response = yield this.client.sendJSON(config, true);
                return response.data;
            });
        }
        /**
         * Given a map of user IDs to client IDs return a prekey for each one.
         * @param userClientMap A map of the user's clients
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getMultiPrekeyBundles
         */
        postMultiPreKeyBundles(userClientMap, limit = UserAPI.DEFAULT_USERS_PREKEY_BUNDLE_CHUNK_SIZE) {
            return __awaiter(this, void 0, void 0, function* () {
                const userIdChunks = commons_1.ArrayUtil.chunk(Object.keys(userClientMap), limit);
                const userPreKeyBundleMapChunks = yield Promise.all(userIdChunks.map(userIdChunk => this._postMultiPreKeyBundlesChunk(userIdChunk.reduce((chunkedUserClientMap, userId) => (Object.assign(Object.assign({}, chunkedUserClientMap), { [userId]: userClientMap[userId] })), {}))));
                return userPreKeyBundleMapChunks.reduce((userPreKeyBundleMap, userPreKeyBundleMapChunk) => (Object.assign(Object.assign({}, userPreKeyBundleMap), userPreKeyBundleMapChunk)), {});
            });
        }
        /**
         * Initiate or complete a password reset.
         * @param resetData The data needed to initiate or complete the reset
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/beginPasswordReset
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/completePasswordReset
         */
        postPasswordReset(resetData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: resetData,
                    method: 'post',
                    url: UserAPI.URL.PASSWORDRESET,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Set a user property.
         * @param propertyKey The property key to set
         * @param propertyData The property data to set
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/setProperty
         */
        putProperty(propertyKey, propertyData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: propertyData,
                    method: 'put',
                    url: `${UserAPI.URL.PROPERTIES}/${propertyKey}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Get rich info of a user
         * @param userId The user ID
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getRichInfo
         */
        getRichInfo(userId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${UserAPI.URL.USERS}/${userId}/${UserAPI.URL.RICH_INFO}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
    }
    UserAPI.DEFAULT_USERS_CHUNK_SIZE = 50;
    UserAPI.DEFAULT_USERS_PREKEY_BUNDLE_CHUNK_SIZE = 128;
    UserAPI.URL = {
        ACTIVATE: '/activate',
        CALLS: '/calls',
        CLIENTS: 'clients',
        CONTACTS: 'contacts',
        DELETE: '/delete',
        HANDLES: 'handles',
        PASSWORDRESET: '/password-reset',
        PRE_KEYS: 'prekeys',
        PROPERTIES: '/properties',
        RICH_INFO: 'rich-info',
        SEARCH: '/search',
        SEND: 'send',
        USERS: '/users',
    };
    return UserAPI;
})();
exports.UserAPI = UserAPI;
//# sourceMappingURL=UserAPI.js.map