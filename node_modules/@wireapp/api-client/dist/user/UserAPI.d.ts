import { ClientPreKey, PreKeyBundle } from '../auth/';
import { PublicClient } from '../client/';
import { UserClients } from '../conversation/UserClients';
import { HttpClient, RequestCancelable } from '../http/';
import { Activate, ActivationResponse, CheckHandles, CompletePasswordReset, HandleInfo, NewPasswordReset, SearchResult, SendActivationCode, User, UserPreKeyBundleMap, VerifyDelete } from '../user/';
import { RichInfo } from './RichInfo';
export declare class UserAPI {
    private readonly client;
    static readonly DEFAULT_USERS_CHUNK_SIZE = 50;
    static readonly DEFAULT_USERS_PREKEY_BUNDLE_CHUNK_SIZE = 128;
    static readonly URL: {
        ACTIVATE: string;
        CALLS: string;
        CLIENTS: string;
        CONTACTS: string;
        DELETE: string;
        HANDLES: string;
        PASSWORDRESET: string;
        PRE_KEYS: string;
        PROPERTIES: string;
        RICH_INFO: string;
        SEARCH: string;
        SEND: string;
        USERS: string;
    };
    constructor(client: HttpClient);
    /**
     * Clear all properties.
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/clearProperties
     */
    deleteProperties(): Promise<void>;
    /**
     * Delete a property.
     * @param propertyKey The property key to delete
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/deleteProperty
     */
    deleteProperty(propertyKey: string): Promise<void>;
    /**
     * Activate (i.e. confirm) an email address or phone number.
     * @param activationCode Activation code
     * @param activationKey Activation key
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/activate
     */
    getActivation(activationCode: string, activationKey: string): Promise<ActivationResponse>;
    /**
     * Retrieve TURN server addresses and credentials.
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getCallsConfig
     */
    getCallsConfiguration(): Promise<RTCConfiguration>;
    /**
     * Get a specific client of a user.
     * @param userId The user ID
     * @param clientId The client ID
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getUserClient
     */
    getClient(userId: string, clientId: string): Promise<PublicClient>;
    /**
     * Get a prekey for a specific client of a user.
     * @param userId The user ID
     * @param clientId The client ID
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getPrekey
     */
    getClientPreKey(userId: string, clientId: string): Promise<ClientPreKey>;
    /**
     * Get all of a user's clients.
     * @param userId The user ID
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getUserClients
     */
    getClients(userId: string): Promise<PublicClient[]>;
    /**
     * Get information on a user handle.
     * @param handle The user's handle
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getUserHandleInfo
     */
    getHandle(handle: string): Promise<HandleInfo>;
    /**
     * List all property keys.
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/listPropertyKeys
     */
    getProperties(): Promise<string[]>;
    /**
     * Get a property value.
     * @param propertyKey The property key to get
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getProperty
     */
    getProperty<T>(propertyKey: string): Promise<T>;
    /**
     * Search for users.
     * @param query The search query
     * @param limit Number of results to return
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/search
     */
    getSearchContacts(query: string, limit?: number): Promise<RequestCancelable<SearchResult>>;
    /**
     * Get a user by ID.
     * @note If you want to get all properties (`sso_id`, `managed_by`, etc.) for your own user, use "/self". Otherwise you will get a user payload with a limited set of properties (what's publicly available).
     * @param userId The user ID
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/user
     */
    getUser(userId: string): Promise<User>;
    /**
     * Get a prekey for each client of a user.
     * @param userId
     */
    getUserPreKeys(userId: string): Promise<PreKeyBundle>;
    /**
     * List users.
     * Note: The 'ids' and 'handles' parameters are mutually exclusive.
     * @param parameters Multiple user's handles or IDs
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/users
     */
    getUsers(parameters: {
        ids: string[];
    }, limit?: number): Promise<User[]>;
    getUsers(parameters: {
        handles: string[];
    }, limit?: number): Promise<User[]>;
    private _getUsers;
    /**
     * DEPRECATED: List users.
     * @deprecated
     * @param userIds Multiple user's IDs
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/users
     */
    getUsersByIds(userIds: string[]): Promise<User[]>;
    /**
     * Activate (i.e. confirm) an email address or phone number.
     * Note: Activation only succeeds once and the number of failed attempts for a valid key is limited.
     * @param activationData Data to activate an account
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/activate_0
     */
    postActivation(activationData: Activate): Promise<ActivationResponse>;
    /**
     * Send (or resend) an email or phone activation code.
     * @param activationCodeData Data to send an activation code
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/sendActivationCode
     */
    postActivationCode(activationCodeData: SendActivationCode): Promise<void>;
    /**
     * Verify account deletion with a code.
     * @param verificationData Data to verify the account deletion
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/verifyDeleteUser
     */
    postDelete(verificationData: VerifyDelete): Promise<void>;
    /**
     * Check availability of user handles.
     * @param handles The handles to check
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/checkUserHandles
     */
    postHandles(handles: CheckHandles): Promise<string[]>;
    /**
     * Check availability of a single user handle.
     * @param handle The handle to check
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/checkUserHandle
     */
    headHandle(handle: string): Promise<void>;
    /**
     * Get a user by handle.
     * @param handle The handle of a user to search for
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getUserByHandle
     */
    getUserByHandle(handle: string): Promise<HandleInfo>;
    private _postMultiPreKeyBundlesChunk;
    /**
     * Given a map of user IDs to client IDs return a prekey for each one.
     * @param userClientMap A map of the user's clients
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getMultiPrekeyBundles
     */
    postMultiPreKeyBundles(userClientMap: UserClients, limit?: number): Promise<UserPreKeyBundleMap>;
    /**
     * Initiate or complete a password reset.
     * @param resetData The data needed to initiate or complete the reset
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/beginPasswordReset
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/completePasswordReset
     */
    postPasswordReset(resetData: NewPasswordReset | CompletePasswordReset): Promise<void>;
    /**
     * Set a user property.
     * @param propertyKey The property key to set
     * @param propertyData The property data to set
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/setProperty
     */
    putProperty<T>(propertyKey: string, propertyData: T): Promise<void>;
    /**
     * Get rich info of a user
     * @param userId The user ID
     * @see https://staging-nginz-https.zinfra.io/swagger-ui/#!/users/getRichInfo
     */
    getRichInfo(userId: string): Promise<RichInfo>;
}
