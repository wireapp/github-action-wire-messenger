"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamInvitationAPI = void 0;
const http_1 = require("../../http/");
const team_1 = require("../team/");
const InvitationError_1 = require("./InvitationError");
let TeamInvitationAPI = /** @class */ (() => {
    class TeamInvitationAPI {
        constructor(client) {
            this.client = client;
        }
        getInvitation(teamId, invitationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${team_1.TeamAPI.URL.TEAMS}/${teamId}/${TeamInvitationAPI.URL.INVITATIONS}/${invitationId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        getAllInvitations(teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                let allInvitations = [];
                let invitationChunk = yield this.getInvitations(teamId, undefined);
                allInvitations = allInvitations.concat(invitationChunk.invitations);
                while (invitationChunk.has_more) {
                    const invitations = invitationChunk.invitations;
                    const lastInvitation = invitations[invitations.length - 1] || {};
                    const lastChunkId = lastInvitation.id;
                    invitationChunk = yield this.getInvitations(teamId, lastChunkId);
                    allInvitations = allInvitations.concat(invitationChunk.invitations);
                }
                return allInvitations;
            });
        }
        getInvitations(teamId, startId, limit = TeamInvitationAPI.MAX_CHUNK_SIZE) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        size: limit,
                        start: startId,
                    },
                    url: `${team_1.TeamAPI.URL.TEAMS}/${teamId}/${TeamInvitationAPI.URL.INVITATIONS}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        deleteInvitation(teamId, invitationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'delete',
                    url: `${team_1.TeamAPI.URL.TEAMS}/${teamId}/${TeamInvitationAPI.URL.INVITATIONS}/${invitationId}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        postInvitation(teamId, invitation) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: invitation,
                    method: 'post',
                    url: `${team_1.TeamAPI.URL.TEAMS}/${teamId}/${TeamInvitationAPI.URL.INVITATIONS}`,
                };
                try {
                    const response = yield this.client.sendJSON(config);
                    return response.data;
                }
                catch (error) {
                    switch (error.label) {
                        case http_1.BackendErrorLabel.INVITE_EMAIL_EXISTS: {
                            throw new InvitationError_1.InvitationEmailExistsError(error.message);
                        }
                        case http_1.BackendErrorLabel.BAD_REQUEST: {
                            throw new InvitationError_1.InvitationInvalidPhoneError(error.message);
                        }
                        case http_1.BackendErrorLabel.INVALID_EMAIL: {
                            throw new InvitationError_1.InvitationInvalidEmailError(error.message);
                        }
                        case http_1.BackendErrorLabel.PHONE_EXISTS: {
                            throw new InvitationError_1.InvitationPhoneExistsError(error.message);
                        }
                    }
                    throw error;
                }
            });
        }
        getInvitationFromCode(invitationCode) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        code: invitationCode,
                    },
                    url: `${team_1.TeamAPI.URL.TEAMS}/${TeamInvitationAPI.URL.INVITATIONS}/${TeamInvitationAPI.URL.INFO}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
    }
    TeamInvitationAPI.MAX_CHUNK_SIZE = 100;
    TeamInvitationAPI.URL = {
        INFO: 'info',
        INVITATIONS: 'invitations',
    };
    return TeamInvitationAPI;
})();
exports.TeamInvitationAPI = TeamInvitationAPI;
//# sourceMappingURL=TeamInvitationAPI.js.map