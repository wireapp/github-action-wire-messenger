"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentAPI = void 0;
let PaymentAPI = /** @class */ (() => {
    class PaymentAPI {
        constructor(client) {
            this.client = client;
        }
        putPaymentData(teamId, paymentData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: paymentData,
                    method: 'put',
                    url: `${PaymentAPI.URL.TEAMS}/${teamId}/${PaymentAPI.URL.BILLING}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        getPaymentData(teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${PaymentAPI.URL.TEAMS}/${teamId}/${PaymentAPI.URL.BILLING}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        deletePaymentData(teamId, paymentData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: paymentData,
                    method: 'delete',
                    url: `${PaymentAPI.URL.TEAMS}/${teamId}/${PaymentAPI.URL.BILLING}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        putPaymentBilling(teamId, billingInfo) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: billingInfo,
                    method: 'put',
                    url: `${PaymentAPI.URL.TEAMS}/${teamId}/${PaymentAPI.URL.BILLING}/${PaymentAPI.URL.INFO}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        getPaymentBilling(teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${PaymentAPI.URL.TEAMS}/${teamId}/${PaymentAPI.URL.BILLING}/${PaymentAPI.URL.INFO}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        putPaymentPlan(teamId, plan) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: plan,
                    method: 'put',
                    url: `${PaymentAPI.URL.TEAMS}/${teamId}/${PaymentAPI.URL.BILLING}/${PaymentAPI.URL.PLAN}/${plan.id}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        getPlans(teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${PaymentAPI.URL.TEAMS}/${teamId}/${PaymentAPI.URL.BILLING}/${PaymentAPI.URL.PLANS}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        getCharges(teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${PaymentAPI.URL.TEAMS}/${teamId}/${PaymentAPI.URL.BILLING}/${PaymentAPI.URL.CHARGES}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        getInvoices(teamId, limit = PaymentAPI.DEFAULT_INVOICES_CHUNK_SIZE, startAfterInvoiceId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    params: {
                        size: limit,
                        start: startAfterInvoiceId,
                    },
                    url: `${PaymentAPI.URL.TEAMS}/${teamId}/${PaymentAPI.URL.BILLING}/${PaymentAPI.URL.INVOICES}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        getSupportedCurrencies(teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${PaymentAPI.URL.TEAMS}/${teamId}/${PaymentAPI.URL.BILLING}/${PaymentAPI.URL.CURRENCIES}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
    }
    PaymentAPI.DEFAULT_INVOICES_CHUNK_SIZE = 10;
    PaymentAPI.URL = {
        BILLING: 'billing',
        CHARGES: 'charges',
        CURRENCIES: 'currencies',
        INFO: 'info',
        INVOICES: 'invoices',
        PLAN: 'plan',
        PLANS: 'plans',
        TEAMS: '/teams',
    };
    return PaymentAPI;
})();
exports.PaymentAPI = PaymentAPI;
//# sourceMappingURL=PaymentAPI.js.map