"use strict";
/*
 * Wire
 * Copyright (C) 2020 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamConversationAPI = void 0;
let TeamConversationAPI = /** @class */ (() => {
    class TeamConversationAPI {
        constructor(client) {
            this.client = client;
        }
        /**
         * Remove a team conversation.
         * @param teamId ID of the team to remove the conversation from
         * @param conversationId ID of the conversation to remove
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/tab.html#!//deleteTeamConversation
         */
        deleteConversation(teamId, conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'delete',
                    url: `${TeamConversationAPI.URL.TEAMS}/${teamId}/${TeamConversationAPI.URL.CONVERSATIONS}/${conversationId}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * Get one team conversation.
         * @param teamId ID of the team to get the conversation from
         * @param conversationId ID of the conversation to get
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/tab.html#!//getTeamConversation
         */
        getConversation(teamId, conversationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${TeamConversationAPI.URL.TEAMS}/${teamId}/${TeamConversationAPI.URL.CONVERSATIONS}/${conversationId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get team conversations.
         * @param teamId ID of the team to get conversations for
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/tab.html#!//getTeamConversations
         */
        getConversations(teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${TeamConversationAPI.URL.TEAMS}/${teamId}/${TeamConversationAPI.URL.CONVERSATIONS}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        /**
         * Get existing roles available for the given team.
         * @param teamId ID of the team to get the roles for
         * @see https://staging-nginz-https.zinfra.io/swagger-ui/tab.html#!//getTeamConversationsRoles
         */
        getRoles(teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${TeamConversationAPI.URL.TEAMS}/${teamId}/${TeamConversationAPI.URL.CONVERSATIONS}/${TeamConversationAPI.URL.ROLES}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
    }
    TeamConversationAPI.URL = {
        CONVERSATIONS: 'conversations',
        ROLES: 'roles',
        TEAMS: '/teams',
    };
    return TeamConversationAPI;
})();
exports.TeamConversationAPI = TeamConversationAPI;
//# sourceMappingURL=TeamConversationAPI.js.map