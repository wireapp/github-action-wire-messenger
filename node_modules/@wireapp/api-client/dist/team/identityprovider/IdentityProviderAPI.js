"use strict";
/*
 * Wire
 * Copyright (C) 2019 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityProviderAPI = void 0;
let IdentityProviderAPI = /** @class */ (() => {
    class IdentityProviderAPI {
        constructor(client) {
            this.client = client;
        }
        getIdentityProvider(identityProviderId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${IdentityProviderAPI.URL.PROVIDER}/${identityProviderId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        getIdentityProviders() {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${IdentityProviderAPI.URL.PROVIDER}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        deleteIdentityProvider(identityProviderId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'delete',
                    url: `${IdentityProviderAPI.URL.PROVIDER}/${identityProviderId}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        postIdentityProvider(identityData) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: identityData,
                    method: 'post',
                    url: `${IdentityProviderAPI.URL.PROVIDER}`,
                };
                const response = yield this.client.sendXML(config);
                return response.data;
            });
        }
        getMetadata() {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${IdentityProviderAPI.URL.SSO}/${IdentityProviderAPI.URL.METADATA}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
    }
    IdentityProviderAPI.URL = {
        METADATA: 'metadata',
        PROVIDER: '/identity-providers',
        SSO: '/sso',
    };
    return IdentityProviderAPI;
})();
exports.IdentityProviderAPI = IdentityProviderAPI;
//# sourceMappingURL=IdentityProviderAPI.js.map