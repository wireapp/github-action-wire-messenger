"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberAPI = void 0;
const TeamAPI_1 = require("../team/TeamAPI");
const commons_1 = require("@wireapp/commons");
let MemberAPI = /** @class */ (() => {
    class MemberAPI {
        constructor(client) {
            this.client = client;
        }
        getMember(teamId, userId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${TeamAPI_1.TeamAPI.URL.TEAMS}/${teamId}/${MemberAPI.URL.MEMBERS}/${userId}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        deleteMember(teamId, userId, password) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        password,
                    },
                    method: 'delete',
                    url: `${TeamAPI_1.TeamAPI.URL.TEAMS}/${teamId}/${MemberAPI.URL.MEMBERS}/${userId}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        postMembers(teamId, member) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        member: member,
                    },
                    method: 'post',
                    url: `${TeamAPI_1.TeamAPI.URL.TEAMS}/${teamId}/${MemberAPI.URL.MEMBERS}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        putMembers(teamId, member) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: {
                        member: member,
                    },
                    method: 'put',
                    url: `${TeamAPI_1.TeamAPI.URL.TEAMS}/${teamId}/${MemberAPI.URL.MEMBERS}`,
                };
                yield this.client.sendJSON(config);
            });
        }
        /**
         * This endpoint returns all members of the a team unless it's a large team (>2000 team member).
         * If the queried team is a large team the `hasMore` flag will switch to `true`.
         */
        getAllMembers(teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    method: 'get',
                    url: `${TeamAPI_1.TeamAPI.URL.TEAMS}/${teamId}/${MemberAPI.URL.MEMBERS}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
        getMembers(teamId, parameters, limit = MemberAPI.DEFAULT_MEMBERS_CHUNK_SIZE) {
            return __awaiter(this, void 0, void 0, function* () {
                const { ids } = parameters;
                if (ids.length) {
                    const uniqueIds = commons_1.ArrayUtil.removeDuplicates(ids);
                    const idChunks = commons_1.ArrayUtil.chunk(uniqueIds, limit);
                    const resolvedTasks = yield Promise.all(idChunks.map((idChunk) => __awaiter(this, void 0, void 0, function* () {
                        const result = yield this._getMembers(teamId, { ids: idChunk });
                        return result.members;
                    })));
                    return commons_1.ArrayUtil.flatten(resolvedTasks);
                }
                return [];
            });
        }
        _getMembers(teamId, parameters) {
            return __awaiter(this, void 0, void 0, function* () {
                const config = {
                    data: { user_ids: parameters.ids },
                    method: 'post',
                    url: `${TeamAPI_1.TeamAPI.URL.TEAMS}/${teamId}/${MemberAPI.URL.MEMBERS_BY_ID_LIST}`,
                };
                const response = yield this.client.sendJSON(config);
                return response.data;
            });
        }
    }
    // Maximum 1600 due to "413 Request Entity Too Large" response
    MemberAPI.DEFAULT_MEMBERS_CHUNK_SIZE = 1600;
    MemberAPI.URL = {
        MEMBERS: 'members',
        MEMBERS_BY_ID_LIST: 'get-members-by-ids-using-post',
    };
    return MemberAPI;
})();
exports.MemberAPI = MemberAPI;
//# sourceMappingURL=MemberAPI.js.map