"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateOrCreateSpec = void 0;
const TABLE_NAME = 'the-simpsons';
exports.updateOrCreateSpec = {
    'automatically creates primary keys as integers if no primary key is given.': (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const first = {
            name: 'Homer',
        };
        const second = {
            name: 'Marge',
        };
        const firstPrimaryKey = yield engine.updateOrCreate(TABLE_NAME, undefined, first);
        expect(firstPrimaryKey).toBe(1);
        const secondPrimaryKey = yield engine.updateOrCreate(TABLE_NAME, undefined, second);
        expect(secondPrimaryKey).toBe(2);
        const persistedRecords = yield engine.readAll(TABLE_NAME);
        expect(persistedRecords.length).toBe(2);
    }),
    'creates a record if it does not exist in the database.': (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const PRIMARY_KEY = 'primary-key';
        const entity = {
            name: 'Old monitor',
        };
        const expectedAmountOfProperties = 1;
        const primaryKey = yield engine.updateOrCreate(TABLE_NAME, PRIMARY_KEY, entity);
        const updatedRecord = yield engine.read(TABLE_NAME, primaryKey);
        expect(updatedRecord.name).toBe(entity.name);
        expect(Object.keys(updatedRecord).length).toBe(expectedAmountOfProperties);
    }),
    'updates an existing database record.': (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const PRIMARY_KEY = 'primary-key';
        const entity = {
            name: 'Old monitor',
        };
        const update = {
            name: 'Old monitor2',
        };
        yield engine.create(TABLE_NAME, PRIMARY_KEY, entity);
        const primaryKey = yield engine.updateOrCreate(TABLE_NAME, PRIMARY_KEY, update);
        const updatedRecord = yield engine.read(TABLE_NAME, primaryKey);
        expect(updatedRecord.name).toBe(update.name);
    }),
};
//# sourceMappingURL=updateOrCreateSpec.js.map