"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSpec = void 0;
const error_1 = require("../engine/error");
const TABLE_NAME = 'the-simpsons';
exports.createSpec = {
    "doesn't save empty values.": (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const PRIMARY_KEY = 'primary-key';
        const entity = undefined;
        try {
            yield engine.create(TABLE_NAME, PRIMARY_KEY, entity);
            fail(new Error('Method is supposed to throw an error.'));
        }
        catch (error) {
            expect(error).toEqual(jasmine.any(error_1.RecordTypeError));
        }
    }),
    "doesn't save null values.": (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const PRIMARY_KEY = 'primary-key';
        const entity = undefined;
        try {
            yield engine.create(TABLE_NAME, PRIMARY_KEY, entity);
            fail(new Error('Method is supposed to throw an error.'));
        }
        catch (error) {
            expect(error).toEqual(jasmine.any(error_1.RecordTypeError));
        }
    }),
    'saves objects.': (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const PRIMARY_KEY = 'primary-key';
        const entity = {
            some: 'value',
        };
        const primaryKey = yield engine.create(TABLE_NAME, PRIMARY_KEY, entity);
        expect(primaryKey).toEqual(PRIMARY_KEY);
        const record = yield engine.read(TABLE_NAME, PRIMARY_KEY);
        expect(record).toEqual(entity);
    }),
    'saves strings and objects in the same table.': (engine) => __awaiter(void 0, void 0, void 0, function* () {
        yield engine.create(TABLE_NAME, 'primary-key-1', 'hello-world');
        const firstRecord = yield engine.read(TABLE_NAME, 'primary-key-1');
        expect(firstRecord).toBe('hello-world');
        yield engine.create(TABLE_NAME, 'primary-key-2', { hello: 'world' });
        const secondRecord = yield engine.read(TABLE_NAME, 'primary-key-2');
        expect(secondRecord).toEqual({ hello: 'world' });
    }),
    'saves strings.': (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const PRIMARY_KEY = 'primary-key';
        const entity = 'value';
        const primaryKey = yield engine.create(TABLE_NAME, PRIMARY_KEY, entity);
        expect(primaryKey).toEqual(PRIMARY_KEY);
        const record = yield engine.read(TABLE_NAME, PRIMARY_KEY);
        expect(record).toEqual(entity);
    }),
    'throws an error when attempting to overwrite a record.': (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const PRIMARY_KEY = 'primary-key';
        const firstEntity = {
            some: 'value',
        };
        const secondEntity = {
            some: 'newer-value',
        };
        try {
            yield engine.create(TABLE_NAME, PRIMARY_KEY, firstEntity);
            yield engine.create(TABLE_NAME, PRIMARY_KEY, secondEntity);
            fail();
        }
        catch (error) {
            expect(error).toEqual(jasmine.any(error_1.RecordAlreadyExistsError));
        }
    }),
};
//# sourceMappingURL=createSpec.js.map