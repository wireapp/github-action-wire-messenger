"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readSpec = void 0;
const RecordNotFoundError_1 = require("../engine/error/RecordNotFoundError");
const TABLE_NAME = 'the-simpsons';
exports.readSpec = {
    'returns a database record.': (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const PRIMARY_KEY = 'primary-key';
        const entity = {
            some: 'value',
        };
        const primaryKey = yield engine.create(TABLE_NAME, PRIMARY_KEY, entity);
        const record = yield engine.read(TABLE_NAME, primaryKey);
        expect(record.some).toBe(entity.some);
    }),
    'throws an error if a record cannot be found.': (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const PRIMARY_KEY = 'primary-key';
        try {
            yield engine.read(TABLE_NAME, PRIMARY_KEY);
            fail(new Error('Method is supposed to throw an error.'));
        }
        catch (error) {
            expect(error).toEqual(jasmine.any(RecordNotFoundError_1.RecordNotFoundError));
        }
    }),
};
//# sourceMappingURL=readSpec.js.map