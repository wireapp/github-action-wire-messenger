"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readAllPrimaryKeysSpec = void 0;
const TABLE_NAME = 'the-simpsons';
exports.readAllPrimaryKeysSpec = {
    'gets the primary keys of all records in a table.': (engine) => __awaiter(void 0, void 0, void 0, function* () {
        const homer = {
            entity: {
                firstName: 'Homer',
                lastName: 'Simpson',
            },
            primaryKey: 'homer-simpson',
        };
        const lisa = {
            entity: {
                firstName: 'Lisa',
                lastName: 'Simpson',
            },
            primaryKey: 'lisa-simpson',
        };
        const marge = {
            entity: {
                firstName: 'Marge',
                lastName: 'Simpson',
            },
            primaryKey: 'marge-simpson',
        };
        yield Promise.all([
            engine.create(TABLE_NAME, homer.primaryKey, homer.entity),
            engine.create(TABLE_NAME, lisa.primaryKey, lisa.entity),
            engine.create(TABLE_NAME, marge.primaryKey, marge.entity),
        ]);
        const primaryKeys = yield engine.readAllPrimaryKeys(TABLE_NAME);
        expect(primaryKeys.length).toBe(3);
        expect(primaryKeys.includes(homer.primaryKey));
        expect(primaryKeys.includes(lisa.primaryKey));
        expect(primaryKeys.includes(marge.primaryKey));
    }),
};
//# sourceMappingURL=readAllPrimaryKeysSpec.js.map