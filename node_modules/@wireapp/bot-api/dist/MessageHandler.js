"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageHandler = void 0;
const data_1 = require("@wireapp/api-client/dist/conversation/data");
const protocol_messaging_1 = require("@wireapp/protocol-messaging");
class MessageHandler {
    constructor() {
        this.account = undefined;
    }
    addUser(conversationId, userId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                yield this.account.service.conversation.addUser(conversationId, userId);
            }
        });
    }
    clearConversation(conversationId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                yield this.account.service.conversation.clearConversation(conversationId);
            }
        });
    }
    getConversation(conversationId) {
        return this.account.service.conversation.getConversations(conversationId);
    }
    getConversations(conversationIds) {
        return this.account.service.conversation.getConversations(conversationIds);
    }
    getUser(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.account.service.user.getUser(userId);
        });
    }
    getUsers(userIds) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.account.service.user.getUsers(userIds);
        });
    }
    removeUser(conversationId, userId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                yield this.account.service.conversation.removeUser(conversationId, userId);
            }
        });
    }
    sendButtonActionConfirmation(conversationId, userId, referenceMessageId, buttonId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const buttonActionConfirmationContent = {
                    buttonId,
                    referenceMessageId,
                };
                const buttonActionConfirmationMessage = this.account.service.conversation.messageBuilder.createButtonActionConfirmationMessage(conversationId, buttonActionConfirmationContent);
                yield this.account.service.conversation.send(buttonActionConfirmationMessage, [userId]);
            }
        });
    }
    sendCall(conversationId, content) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const callPayload = this.account.service.conversation.messageBuilder.createCall(conversationId, content);
                yield this.account.service.conversation.send(callPayload);
            }
        });
    }
    sendPoll(conversationId, text, buttons) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const message = this.account.service.conversation.messageBuilder
                    .createComposite(conversationId)
                    .addText(protocol_messaging_1.Text.create({ content: text }));
                buttons.forEach(button => message.addButton(button));
                yield this.account.service.conversation.send(message.build());
            }
        });
    }
    sendConfirmation(conversationId, firstMessageId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const confirmationPayload = this.account.service.conversation.messageBuilder.createConfirmation(conversationId, firstMessageId, protocol_messaging_1.Confirmation.Type.DELIVERED);
                yield this.account.service.conversation.send(confirmationPayload);
            }
        });
    }
    sendConnectionRequest(userId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                yield this.account.service.connection.createConnection(userId);
            }
        });
    }
    sendConnectionResponse(userId, accept) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                if (accept) {
                    yield this.account.service.connection.acceptConnection(userId);
                }
                else {
                    yield this.account.service.connection.ignoreConnection(userId);
                }
            }
        });
    }
    sendEditedText(conversationId, originalMessageId, newMessageText, newMentions, newLinkPreview, userIds) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const editedPayload = this.account.service.conversation.messageBuilder
                    .createEditedText(conversationId, newMessageText, originalMessageId)
                    .withMentions(newMentions)
                    .build();
                const editedMessage = yield this.account.service.conversation.send(editedPayload, userIds);
                if (newLinkPreview) {
                    const linkPreviewPayload = yield this.account.service.conversation.messageBuilder.createLinkPreview(newLinkPreview);
                    const editedWithPreviewPayload = this.account.service.conversation.messageBuilder
                        .createEditedText(conversationId, newMessageText, originalMessageId, editedMessage.id)
                        .withLinkPreviews([linkPreviewPayload])
                        .withMentions(newMentions)
                        .build();
                    yield this.account.service.conversation.send(editedWithPreviewPayload, userIds);
                }
            }
        });
    }
    sendFile(conversationId, file, metadata) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const metadataPayload = this.account.service.conversation.messageBuilder.createFileMetadata(conversationId, metadata);
                yield this.account.service.conversation.send(metadataPayload);
                try {
                    const filePayload = yield this.account.service.conversation.messageBuilder.createFileData(conversationId, file, metadataPayload.id);
                    yield this.account.service.conversation.send(filePayload);
                }
                catch (error) {
                    const abortPayload = yield this.account.service.conversation.messageBuilder.createFileAbort(conversationId, protocol_messaging_1.Asset.NotUploaded.FAILED, metadataPayload.id);
                    yield this.account.service.conversation.send(abortPayload);
                }
            }
        });
    }
    sendImage(conversationId, image) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const imagePayload = yield this.account.service.conversation.messageBuilder.createImage(conversationId, image);
                yield this.account.service.conversation.send(imagePayload);
            }
        });
    }
    sendLocation(conversationId, location) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const locationPayload = this.account.service.conversation.messageBuilder.createLocation(conversationId, location);
                yield this.account.service.conversation.send(locationPayload);
            }
        });
    }
    sendPing(conversationId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const pingPayload = this.account.service.conversation.messageBuilder.createPing(conversationId);
                yield this.account.service.conversation.send(pingPayload);
            }
        });
    }
    sendReaction(conversationId, originalMessageId, type) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const reactionPayload = this.account.service.conversation.messageBuilder.createReaction(conversationId, {
                    originalMessageId,
                    type,
                });
                yield this.account.service.conversation.send(reactionPayload);
            }
        });
    }
    sendQuote(conversationId, quotedMessage, text) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const replyPayload = this.account.service.conversation.messageBuilder
                    .createText(conversationId, text)
                    .withQuote(quotedMessage)
                    .build();
                yield this.account.service.conversation.send(replyPayload);
            }
        });
    }
    sendReply(conversationId, quotedMessage, text) {
        return this.sendQuote(conversationId, quotedMessage, text);
    }
    sendText(conversationId, text, mentions, linkPreview, userIds) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                const payload = this.account.service.conversation.messageBuilder
                    .createText(conversationId, text)
                    .withMentions(mentions)
                    .build();
                const sentMessage = yield this.account.service.conversation.send(payload, userIds);
                if (linkPreview) {
                    const linkPreviewPayload = yield this.account.service.conversation.messageBuilder.createLinkPreview(linkPreview);
                    const editedWithPreviewPayload = this.account.service.conversation.messageBuilder
                        .createText(conversationId, text, sentMessage.id)
                        .withLinkPreviews([linkPreviewPayload])
                        .withMentions(mentions)
                        .build();
                    yield this.account.service.conversation.send(editedWithPreviewPayload, userIds);
                }
            }
        });
    }
    sendTyping(conversationId, status) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if ((_a = this.account) === null || _a === void 0 ? void 0 : _a.service) {
                if (status === data_1.CONVERSATION_TYPING.STARTED) {
                    yield this.account.service.conversation.sendTypingStart(conversationId);
                }
                else {
                    yield this.account.service.conversation.sendTypingStop(conversationId);
                }
            }
        });
    }
}
exports.MessageHandler = MessageHandler;
//# sourceMappingURL=MessageHandler.js.map