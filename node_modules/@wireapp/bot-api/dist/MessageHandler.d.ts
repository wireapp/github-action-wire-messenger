import { Conversation } from '@wireapp/api-client/dist/conversation';
import { CONVERSATION_TYPING } from '@wireapp/api-client/dist/conversation/data';
import { ConversationEvent, TeamEvent, UserEvent } from '@wireapp/api-client/dist/event';
import { User } from '@wireapp/api-client/dist/user/';
import { Account } from '@wireapp/core';
import { PayloadBundle, ReactionType } from '@wireapp/core/dist/conversation/';
import { CallingContent, FileContent, FileMetaDataContent, ImageContent, LinkPreviewContent, LocationContent, MentionContent } from '@wireapp/core/dist/conversation/content/';
import { QuotableMessage } from '@wireapp/core/dist/conversation/message/OtrMessage';
export declare abstract class MessageHandler {
    account: Account | undefined;
    abstract handleEvent(payload: PayloadBundle | ConversationEvent | UserEvent | TeamEvent): void;
    addUser(conversationId: string, userId: string): Promise<void>;
    clearConversation(conversationId: string): Promise<void>;
    getConversation(conversationId: string): Promise<Conversation>;
    getConversations(conversationIds?: string[]): Promise<Conversation[]>;
    getUser(userId: string): Promise<User>;
    getUsers(userIds: string[]): Promise<User[]>;
    removeUser(conversationId: string, userId: string): Promise<void>;
    sendButtonActionConfirmation(conversationId: string, userId: string, referenceMessageId: string, buttonId: string): Promise<void>;
    sendCall(conversationId: string, content: CallingContent): Promise<void>;
    sendPoll(conversationId: string, text: string, buttons: string[]): Promise<void>;
    sendConfirmation(conversationId: string, firstMessageId: string): Promise<void>;
    sendConnectionRequest(userId: string): Promise<void>;
    sendConnectionResponse(userId: string, accept: boolean): Promise<void>;
    sendEditedText(conversationId: string, originalMessageId: string, newMessageText: string, newMentions?: MentionContent[], newLinkPreview?: LinkPreviewContent, userIds?: string[]): Promise<void>;
    sendFile(conversationId: string, file: FileContent, metadata: FileMetaDataContent): Promise<void>;
    sendImage(conversationId: string, image: ImageContent): Promise<void>;
    sendLocation(conversationId: string, location: LocationContent): Promise<void>;
    sendPing(conversationId: string): Promise<void>;
    sendReaction(conversationId: string, originalMessageId: string, type: ReactionType): Promise<void>;
    sendQuote(conversationId: string, quotedMessage: QuotableMessage, text: string): Promise<void>;
    sendReply(conversationId: string, quotedMessage: QuotableMessage, text: string): Promise<void>;
    sendText(conversationId: string, text: string, mentions?: MentionContent[], linkPreview?: LinkPreviewContent, userIds?: string[]): Promise<void>;
    sendTyping(conversationId: string, status: CONVERSATION_TYPING): Promise<void>;
}
