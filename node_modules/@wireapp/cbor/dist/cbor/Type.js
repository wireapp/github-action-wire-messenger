"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = void 0;
let Type = /** @class */ (() => {
    class Type {
        static major(type) {
            switch (type) {
                case Type.ARRAY:
                    return 4;
                case Type.BOOL:
                    return 7;
                case Type.BREAK:
                    return 7;
                case Type.BYTES:
                    return 2;
                case Type.FLOAT16:
                    return 7;
                case Type.FLOAT32:
                    return 7;
                case Type.FLOAT64:
                    return 7;
                case Type.UINT8:
                    return 0;
                case Type.UINT16:
                    return 0;
                case Type.UINT32:
                    return 0;
                case Type.UINT64:
                    return 0;
                case Type.INT8:
                    return 1;
                case Type.INT16:
                    return 1;
                case Type.INT32:
                    return 1;
                case Type.INT64:
                    return 1;
                case Type.NULL:
                    return 7;
                case Type.OBJECT:
                    return 5;
                case Type.TAGGED:
                    return 6;
                case Type.TEXT:
                    return 3;
                case Type.UNDEFINED:
                    return 7;
                default:
                    throw new TypeError('Invalid CBOR type');
            }
        }
    }
    Type.ARRAY = 1;
    Type.BOOL = 2;
    Type.BREAK = 3;
    Type.BYTES = 4;
    Type.FLOAT16 = 5;
    Type.FLOAT32 = 6;
    Type.FLOAT64 = 7;
    Type.UINT8 = 8;
    Type.UINT16 = 9;
    Type.UINT32 = 10;
    Type.UINT64 = 11;
    Type.INT8 = 12;
    Type.INT16 = 13;
    Type.INT32 = 14;
    Type.INT64 = 15;
    Type.NULL = 16;
    Type.OBJECT = 17;
    Type.TAGGED = 18;
    Type.TEXT = 19;
    Type.UNDEFINED = 20;
    return Type;
})();
exports.Type = Type;
//# sourceMappingURL=Type.js.map