export interface DecoderConfig {
    max_array_length: number;
    max_bytes_length: number;
    max_nesting: number;
    max_object_size: number;
    max_text_length: number;
}
export declare class Decoder {
    private readonly buffer;
    private readonly config;
    private view;
    constructor(buffer: ArrayBuffer, config?: DecoderConfig);
    private static _check_overflow;
    private _advance;
    private get _available();
    private _read;
    private _u8;
    private _u16;
    private _u32;
    private _u64;
    private _f32;
    private _f64;
    private _read_length;
    private _bytes;
    private _read_type_info;
    private _type_info_with_assert;
    private _read_unsigned;
    private _read_signed;
    private _skip_until_break;
    private _skip_value;
    u8(): number;
    u16(): number;
    u32(): number;
    u64(): number;
    i8(): number;
    i16(): number;
    i32(): number;
    i64(): number;
    unsigned(): number;
    int(): number;
    f16(): number;
    f32(): number;
    f64(): number;
    bool(): boolean;
    bytes(): ArrayBuffer;
    text(): string;
    optional<T>(closure: () => T): T | null | undefined;
    array(): number;
    object(): number;
    skip(): boolean;
}
